<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Artnet协议详解</title>
    <url>/2020/11/25/Artnet%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Chrome科学上网</title>
    <url>/2019/02/27/Chrome%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</url>
    <content><![CDATA[<hr>
<img align="left" src="https://i.postimg.cc/qv9s71xK/setupvpn-1.png"/>

<p>&emsp;&emsp; 由于各种对自由的向往，希望能够访问Google等国外网站。一款名叫<a href="https://setupvpn.com/">SetupVPN</a>的Chrome扩展可以很方便的实现科学上网，速度也还可以。</p>
<hr>
<a id="more"></a>  

<h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p>&emsp;&emsp; 由于<a href="https://chrome.google.com/webstore/detail/setupvpn-lifetime-free-vp/oofgbpoabipfcfjapgnbbjjaenockbdp?utm_source=www.crx4chrome.com">Chrome网上应用商店</a>被墙。我们可以通过<a href="https://www.crx4chrome.com/crx/36007/">crx4chrome</a>,来下载此扩展。下载完成之后通过离线安装此扩展。  </p>
<hr>
<h2 id="Chrome离线安装扩展"><a href="#Chrome离线安装扩展" class="headerlink" title="Chrome离线安装扩展"></a>Chrome离线安装扩展</h2><p>&emsp;&emsp; 打开Chrome中<a href="chrome://extensions/">扩展程序</a>,打开页面右上角<code>开发者模式</code>,再将下载好的crx文件拖拽到当前页面中，即可安装成功。  </p>
<div style="text-align: center;">

<p><img src="https://i.postimg.cc/d1cPV0rR/1551254821-1.png"></p>
</div>
<br />

<hr>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>&emsp;&emsp; 1、扩展安装完成后点击右上角图标，注册一个账号。<br /><br>&emsp;&emsp; 2、选择<code>免费服务器</code>，选择<code>日本</code>。<br /><br>&emsp;&emsp; 3、提示连接成功后即可<code>Enjoy freedom</code>，若连接失败就切换其他的服务器。<br /><br>&emsp;&emsp; 4、断开连接请点击<code>关闭VPN</code>。<br /> </p>
<hr>
]]></content>
      <tags>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言读取PostgreSQL数据库</title>
    <url>/2020/04/23/Go%E8%AF%AD%E8%A8%80%E8%AF%BB%E5%8F%96PostgreSQL%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<p>Go语言读取PostgreSQL数据库</p>
<a id="more"></a>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;database/sql&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	_<span class="string">&quot;github.com/lib/pq&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">const (</span><br><span class="line">	host     = <span class="string">&quot;10.65.43.135&quot;</span></span><br><span class="line">	port     = <span class="number">5432</span></span><br><span class="line">	user     = <span class="string">&quot;look&quot;</span></span><br><span class="line">	password = <span class="string">&quot;look&quot;</span></span><br><span class="line">	dbname   = <span class="string">&quot;HQERP_WH&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">	psqlInfo := fmt.Sprintf(<span class="string">&quot;host=%s port=%d user=%s &quot;</span>+</span><br><span class="line">		<span class="string">&quot;password=%s dbname=%s sslmode=disable&quot;</span>,</span><br><span class="line">		host, port, user, password, dbname)</span><br><span class="line">	db, err := sql.Open(<span class="string">&quot;postgres&quot;</span>, psqlInfo)</span><br><span class="line">	<span class="keyword">if</span> err != nil &#123;</span><br><span class="line">		panic(err)</span><br><span class="line">	&#125;</span><br><span class="line">	defer db.Close()</span><br><span class="line"></span><br><span class="line">	err = db.Ping()</span><br><span class="line">	<span class="keyword">if</span> err != nil &#123;</span><br><span class="line">		panic(err)</span><br><span class="line">	&#125; <span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">		fmt.Println(<span class="string">&quot;Successfully connected!&quot;</span>)</span><br><span class="line">		rows,err := db.Query(<span class="string">&quot;SELECT * FROM t_city&quot;</span>)</span><br><span class="line">		fmt.Println(rows.Next())</span><br><span class="line">		<span class="keyword">if</span> err ==nil&#123;</span><br><span class="line">			println(<span class="string">&quot;-----------&quot;</span>)</span><br><span class="line">			<span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">				var city_id <span class="built_in">int</span></span><br><span class="line">				var city_name string</span><br><span class="line">				err = rows.Scan( &amp;city_name, &amp;city_id)</span><br><span class="line">				fmt.Println( city_name, city_id, <span class="string">&quot;&quot;</span>)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			fmt.Println(err)</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Go语言</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>MSYS2编译MPV</title>
    <url>/2019/02/18/MSYS2%E7%BC%96%E8%AF%91MPV/</url>
    <content><![CDATA[<p>官方提供的mpv文件调用lua socket一直出错，不得已自己使用MSYS2编译MPV，使用lua或luajit.</p>
<a id="more"></a>

<h2 id="安装MSYS2"><a href="#安装MSYS2" class="headerlink" title="安装MSYS2"></a>安装MSYS2</h2><p>下载<a href="http://www.msys2.org/">msys2</a>,并安装。</p>
<h3 id="打开MSYS2"><a href="#打开MSYS2" class="headerlink" title="打开MSYS2"></a>打开MSYS2</h3><p>安装完成后，打开MSYS2 MinGW 64-bit快捷方式。</p>
<h3 id="更新MSYS2源"><a href="#更新MSYS2源" class="headerlink" title="更新MSYS2源"></a>更新MSYS2源</h3><p>由于国外镜像太慢，建议改为国内镜像，更改方法很多，例如<a href="https://blog.csdn.net/liyuanbhu/article/details/56496501">给 MSYS2 添加中科大的源</a>。</p>
<p>也可改为清华源,编辑<code>/etc/pacman.d/mirrorlist.mingw32</code>在文件开头添加：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/msys2/mingw/i686</span><br></pre></td></tr></table></figure>
<p>编辑 /etc/pacman.d/mirrorlist.mingw64 ，在文件开头添加：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/msys2/mingw/x86_64</span><br></pre></td></tr></table></figure>
<p>编辑 /etc/pacman.d/mirrorlist.msys ，在文件开头添加：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/msys2/msys/<span class="variable">$arch</span></span><br></pre></td></tr></table></figure>
<p>然后执行 pacman -Sy 刷新软件包数据即可。</p>
<h2 id="安装mpv依赖项"><a href="#安装mpv依赖项" class="headerlink" title="安装mpv依赖项"></a>安装mpv依赖项</h2><p>安装MSYS2构建依赖项和MinGW-w64编译器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -S git python <span class="variable">$MINGW_PACKAGE_PREFIX</span>-&#123;pkg-config,gcc&#125;</span><br></pre></td></tr></table></figure>
<p>安装依赖项</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -S <span class="variable">$MINGW_PACKAGE_PREFIX</span>-&#123;ffmpeg,libjpeg-turbo,lua51,angleproject-git&#125;</span><br></pre></td></tr></table></figure>
<p>或执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -S <span class="variable">$MINGW_PACKAGE_PREFIX</span>-&#123;ffmpeg,libjpeg-turbo,luajit-git,angleproject-git&#125;</span><br></pre></td></tr></table></figure>
<p>将lua51改为luajit</p>
<h2 id="编译MPV"><a href="#编译MPV" class="headerlink" title="编译MPV"></a>编译MPV</h2><h3 id="lua版本"><a href="#lua版本" class="headerlink" title="lua版本"></a>lua版本</h3><p>lua52,lua53均不支持，仅支持lua51或luajit</p>
<h3 id="克隆最新版本mpv"><a href="#克隆最新版本mpv" class="headerlink" title="克隆最新版本mpv"></a>克隆最新版本mpv</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/mpv-player/mpv.git &amp;&amp; <span class="built_in">cd</span> mpv</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/bin/python3 bootstrap.py</span><br></pre></td></tr></table></figure>
<h3 id="编译mpv"><a href="#编译mpv" class="headerlink" title="编译mpv"></a>编译mpv</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/bin/python3 waf configure CC=gcc.exe --check-c-compiler=gcc --prefix=<span class="variable">$MSYSTEM_PREFIX</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/bin/python3 waf install</span><br></pre></td></tr></table></figure>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="编译完成打开蓝屏"><a href="#编译完成打开蓝屏" class="headerlink" title="编译完成打开蓝屏"></a>编译完成打开蓝屏</h3><p>解决办法请参考<a href="https://github.com/mpv-player/mpv/issues/3824">此链接</a>,或直接将此<a href="http://i.fsbn.eu/pub/angle/angle-20161114-g9863a3e-win64.7z">DLL</a>文件替换进MPV文件根目录</p>
<h3 id="lua脚本使用方法"><a href="#lua脚本使用方法" class="headerlink" title="lua脚本使用方法"></a>lua脚本使用方法</h3><p>WIN+R,运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%APPDATA%</span><br></pre></td></tr></table></figure>
<p>找到或新建MPV文件夹，在MPV文件夹下新建Scripts文件夹，将lua脚本置于此文件夹下即可</p>
<h3 id="调用C"><a href="#调用C" class="headerlink" title="调用C++"></a>调用C++</h3><p>luajit调用MSVC编译的DLL时多数会报错，尽可能使用GCC进行编译</p>
<p>更多信息:<br><a href="https://mpv.io/">MPV 编译说明</a><br><a href="https://www.jianshu.com/p/ce18bc1d49ef?from=timeline">lua调用C++/C 函数库</a><br><a href="https://blog.csdn.net/thundon/article/details/45177079">luajit 使用FFI调用C++/C 函数库</a></p>
]]></content>
      <tags>
        <tag>编程</tag>
        <tag>播放器</tag>
      </tags>
  </entry>
  <entry>
    <title>Open stage control发送OSC指令到Blender</title>
    <url>/2020/11/14/Open%20Stage%20Control%E5%8F%91%E9%80%81OSC%E6%8C%87%E4%BB%A4%E5%88%B0Blender/</url>
    <content><![CDATA[<p>Open stage control提供简便方法创建样式丰富的舞台音视频设备控制界面。堪称是PC端的TouchOSC，更好的是它在创建本地应用的同时，提供了一个相同的web界面，可以很方便的实现多平台控制。初步了解了下，在此做以下记录。</p>
<a id="more"></a>
<h2 id="Open-stage-control发送OSC指令到Blender"><a href="#Open-stage-control发送OSC指令到Blender" class="headerlink" title="Open stage control发送OSC指令到Blender"></a>Open stage control发送OSC指令到Blender</h2><h4 id="1、Blender上安装Node-OSC插件"><a href="#1、Blender上安装Node-OSC插件" class="headerlink" title="1、Blender上安装Node OSC插件"></a>1、Blender上安装Node OSC插件</h4><h4 id="2、下载Open-stage-control"><a href="#2、下载Open-stage-control" class="headerlink" title="2、下载Open stage control"></a>2、下载Open stage control</h4><h4 id="3、-打开Open-stage-control，设置OSC地址及端口"><a href="#3、-打开Open-stage-control，设置OSC地址及端口" class="headerlink" title="3、 打开Open stage control，设置OSC地址及端口"></a>3、 打开Open stage control，设置OSC地址及端口</h4><h4 id="4、-定义XYZ轴缩放滑块，并保存"><a href="#4、-定义XYZ轴缩放滑块，并保存" class="headerlink" title="4、 定义XYZ轴缩放滑块，并保存"></a>4、 定义XYZ轴缩放滑块，并保存</h4><h4 id="4、-重启并导入定义好的界面，勾选发送，启动服务器"><a href="#4、-重启并导入定义好的界面，勾选发送，启动服务器" class="headerlink" title="4、 重启并导入定义好的界面，勾选发送，启动服务器"></a>4、 重启并导入定义好的界面，勾选发送，启动服务器</h4><h4 id="5、-网页内打开IP地址-8080"><a href="#5、-网页内打开IP地址-8080" class="headerlink" title="5、 网页内打开IP地址+8080"></a>5、 网页内打开IP地址+8080</h4><h2 id="过程视频"><a href="#过程视频" class="headerlink" title="过程视频"></a>过程视频</h2><iframe  height="600" width="800"  src="//player.bilibili.com/player.html?aid=670354922&bvid=BV1Ca4y1p7K2&cid=255406084&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
      <tags>
        <tag>Control</tag>
        <tag>OSC</tag>
      </tags>
  </entry>
  <entry>
    <title>Open Stage Control等软件</title>
    <url>/2020/09/28/Open%20Stage%20Control%E7%AD%89%E8%BD%AF%E4%BB%B6/</url>
    <content><![CDATA[<p>几个比较有趣的软件，现在可能不完善，做一下记录方便以后查询</p>
<a id="more"></a>

<h2 id="Openframeworks"><a href="#Openframeworks" class="headerlink" title="Openframeworks"></a>Openframeworks</h2><p><a href="https://openframeworks.cc/">Openframeworks</a>,C++开源工具包，生态比较好，教程比较全，第三方插件比较多</p>
<h2 id="Touchdesigner"><a href="#Touchdesigner" class="headerlink" title="Touchdesigner"></a>Touchdesigner</h2><p><a href="https://derivative.ca/">Touchdesigner</a>,节点式编程环境，主要以python为主，更新很快，功能很全,为数不多的几个直接支持dante的软件</p>
<h2 id="VVVV"><a href="#VVVV" class="headerlink" title="VVVV"></a>VVVV</h2><p><a href="http://www.vvvv.org/">VVVV</a>,不解释，应用很多,是一个混合的视觉/文本实时编程环境，便于原型制作和开发.整体逻辑与TD差不多，boygroup比较亮眼<br><img src="https://vvvv.org/sites/all/themes/vvvv/css/img/logo.png"></p>
<h2 id="Max-Msp"><a href="#Max-Msp" class="headerlink" title="Max/Msp"></a>Max/Msp</h2><p><a href="https://cycling74.com/">Max/Msp</a>，类似VVVV和TD的节点式编程环境，更加侧重与音频分析方面。未做具体测试</p>
<h2 id="Ossia"><a href="#Ossia" class="headerlink" title="Ossia"></a>Ossia</h2><p><a href="http://ossia.io/">Ossia</a>，开源控制软件，支持发送和接收 OSC、MIDI、DMX 或直接通过 HTTP 或串口，功能上与Chataigne有很多重叠。Ossia和Chataigne对比多了些音频合成和VJ方面的功能，提供了更多与其他软件间的绑定，功能上更全面，官方文档相对丰富些<br><img src="http://ossia.io/assets/score.png"></p>
<h2 id="JUCE"><a href="#JUCE" class="headerlink" title="JUCE"></a>JUCE</h2><p><a href="https://juce.com/">JUCE</a>类似openframeworks,集成度更高,对插件的需求低一些,UI和音频方面的功能更强些.UI效果更好些<br><img src="https://images.ctfassets.net/6b0pysm1rxni/3GsTdBOt7q2aWe4oY2a2ua/5a0030c35df602afe246c9adac5f7d2d/Chebyshev_Filter_5.3_Final_Desktop_JUCE_5.3_Graphic.png?w=1176&q=90&fl=progressive&fit=fill&h=662" alt="JUCE"></p>
<h2 id="Chataigne"><a href="#Chataigne" class="headerlink" title="Chataigne"></a>Chataigne</h2><p><a href="http://benjamin.kuperberg.fr/chataigne/zh/#download">Chataigne</a>，开源控制软件，重点在于控制周边设备。集成多种控制协议，诸如<code>UDP</code>、<code>TCP</code>、<code>DMX</code>、<code>串口</code>、<code>MIDI</code>、<code>OSC</code>、<code>ARTNET</code>、<code>PJLINK</code>，可以实现用最少的代码控制周边硬件和软件。可以把它作为一个中控来使用。但是目前官方文档较少，很多内容没有说明，使用需要一段时间摸索。<br><img src="https://camo.githubusercontent.com/1cd0fe942276c26ab32726434b4fe3ae060588bf/687474703a2f2f62656e6a616d696e2e6b75706572626572672e66722f636861746169676e652f757365722f696d616765732f73637265656e73686f74322e706e67"></p>
<h2 id="Troikatronix"><a href="#Troikatronix" class="headerlink" title="Troikatronix"></a>Troikatronix</h2><p><a href="https://troikatronix.com/">troikatronix</a>,收费软件，未测试，目测功能很全面</p>
<h2 id="Cinder"><a href="#Cinder" class="headerlink" title="Cinder"></a>Cinder</h2><p><a href="https://libcinder.org/">Cinder</a>,C++开源图形库，与openframeworks非常类似，未测试使用</p>
<h2 id="Open-Stage-Control"><a href="#Open-Stage-Control" class="headerlink" title="Open Stage Control"></a>Open Stage Control</h2><p><a href="https://v0.openstagecontrol.ammd.net/">Open Stage Control</a>，开源控制软件，以往使用QSC协议多数是通过<a href="https://hexler.net/products/touchosc">TouchQSC</a>和<a href="https://liine.net/en/products/lemur/">lemur</a>在Android或IOS平台上使用。如果希望在PC或网页上使用QSC控制其他软件，就需要通过代码自己造轮子的 方式来实现。而Open Stage Control的作用就是将Touch QSC的功能搬到了网页或PC上．<br><img src="https://v0.openstagecontrol.ammd.net/img/ardour-osc.png"></p>
<h2 id="Iannix"><a href="#Iannix" class="headerlink" title="Iannix"></a>Iannix</h2><p><a href="https://www.iannix.org/en/">Iannix</a>，IanniX 是一个图形开源音序器，用于数字艺术。IanniX 通过开放声音控制 （OSC） 事件和曲线同步到您的实时环境。文档较少，目测与VVVV和TD目标类似，功能相对少很多。<br><img src="https://www.iannix.org/images/photos/home3.jpg"></p>
<h2 id="MidiMonster"><a href="#MidiMonster" class="headerlink" title="MidiMonster"></a>MidiMonster</h2><p><a href="https://midimonster.net/">MidiMonster</a>，舞台和表演控制世界使用这种类型的许多不同的协议，例如控制舞台灯光，乐器和各种效果。MIDIMonster还可用作脚本和控制环境，以生成任何受支持协议上的新的和修改现有的控制数据。简单说就是一个转发工具将MIDI、OSC、ARTNET、sACN 、Mouse、 Keyboard等协议互相转换<br><img src="https://midimonster.net/assets/MIDImonster-logo.svg"></p>
<h2 id="VUO"><a href="#VUO" class="headerlink" title="VUO"></a>VUO</h2><p><a href="https://vuo.org/">VUO</a>,界面类似Processing,使用上相对来说更简单些,封装的库更多,提供MIDI、OSC、ARTNET、sACN 、Mouse、 Keyboard等协议可以直接调用.只提供MAC版本<br><img src="https://vuo.org/sites/default/files/vuo-wordmark-teal.svg"></p>
<h2 id="NodeBox"><a href="#NodeBox" class="headerlink" title="NodeBox"></a>NodeBox</h2><p><a href="https://www.nodebox.net/node/">nodebox</a>,是一个基于节点的软件应用程序，用于生成设计。它由设计师从零开始构建，易于使用、高效、快速，未尝试<br><img src="https://www.nodebox.net/media/homepage/NB3iconoutlineonly.png"></p>
<h2 id="P5js"><a href="#P5js" class="headerlink" title="P5js"></a>P5js</h2><p><a href="https://p5js.org/">p5js</a>,未测试，感觉像把processing搬到JavaScript上了，用浏览器实现所有创意编程</p>
<h2 id="Puredata"><a href="#Puredata" class="headerlink" title="Puredata"></a>Puredata</h2><p><a href="https://puredata.info/">puredata</a>,是多媒体的开源视觉编程语言,未测试，感觉文档比较凌乱</p>
<h2 id="Smode"><a href="#Smode" class="headerlink" title="Smode"></a>Smode</h2><p><a href="https://smode.fr/">smode</a>,主页打不开，未测试</p>
<h2 id="Nannou"><a href="#Nannou" class="headerlink" title="Nannou"></a>Nannou</h2><p><a href="https://nannou.cc/">nannou</a>,使用Rust语言 的开源创意编码框架，具体功能未尝试<br><img src="https://nannou.cc/static/ffd6f88f96893779a8dd03702fd43138/71eb7/nannou_logo_alpha.png"></p>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="Reaper"><a href="#Reaper" class="headerlink" title="Reaper"></a>Reaper</h2><p><a href="https://www.reaper.fm/">reaper</a>，开源DAW软件，体积小14M，但是实现大多数DAW软件的功能，免费版除了打开之后等5秒外没有任何限制<br><img src="https://www.reaper.fm/v6img/ss_persp_v63.jpg"></p>
]]></content>
      <tags>
        <tag>Control</tag>
      </tags>
  </entry>
  <entry>
    <title>TouchDesigner入门</title>
    <url>/2020/03/02/TouchDesigner%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>前段时间在做互动装置相关研究 ，主要针对Dante虚拟声卡和多个设备的控制，想找一些编程难度相对低一些，功能相对强大的控制平台，之前听说过Touch Designer和VVVV。尝试了下Touch Designer，很有趣在此做一下记录</p>
<a id="more"></a>

<h3 id="TouchDesigner-是什么？"><a href="#TouchDesigner-是什么？" class="headerlink" title="TouchDesigner 是什么？"></a>TouchDesigner 是什么？</h3><p>TouchDesginer 是一个视觉化的基于节点的编程语言，经常简称为TD。</p>
<p>在制作过程中TD作为一个平台本身具有DMX, Artnet,Spout, Serial, UDP/TCP, OSC等控制接口，可以控制周边众多软硬件。超强的I/O整合模块让舞台控制、灯光控制、声音控制、视频控制和各式各样的传感器整合到了一起。作为媒体软件可以实现实时音视频渲染输出，实现3Dmapping，互动装置，VR等效果。内置python解释器，可以实现很强大的扩展功能。</p>
<h3 id="内置组件"><a href="#内置组件" class="headerlink" title="内置组件"></a>内置组件</h3><h4 id="OP-Operator-操作"><a href="#OP-Operator-操作" class="headerlink" title="OP:Operator 操作**"></a>OP:Operator 操作**</h4><h4 id="COMP-Component-黑色：-元件组件"><a href="#COMP-Component-黑色：-元件组件" class="headerlink" title="COMP:Component  黑色： 元件组件**"></a>COMP:Component  黑色： 元件组件**</h4><h4 id="TOP-Texture-OP-紫色：-纹理-2D处理，图片视频，TIF等"><a href="#TOP-Texture-OP-紫色：-纹理-2D处理，图片视频，TIF等" class="headerlink" title="TOP:Texture OP  紫色： 纹理  2D处理，图片视频，TIF等**"></a>TOP:Texture OP  紫色： 纹理  2D处理，图片视频，TIF等**</h4><h4 id="CHOP-Channel-OP-绿色：-通道-信号的处理"><a href="#CHOP-Channel-OP-绿色：-通道-信号的处理" class="headerlink" title="CHOP:Channel OP 绿色： 通道 信号的处理**"></a>CHOP:Channel OP 绿色： 通道 信号的处理**</h4><h4 id="SOP-Sphere-OP-蓝色：-球体，球面-3D处理"><a href="#SOP-Sphere-OP-蓝色：-球体，球面-3D处理" class="headerlink" title="SOP:Sphere OP 蓝色： 球体，球面 3D处理**"></a>SOP:Sphere OP 蓝色： 球体，球面 3D处理**</h4><h4 id="DAT-Data-OP-玫红色：数据-传递数据，脚本"><a href="#DAT-Data-OP-玫红色：数据-传递数据，脚本" class="headerlink" title="DAT:Data OP 玫红色：数据 传递数据，脚本**"></a>DAT:Data OP 玫红色：数据 传递数据，脚本**</h4><h4 id="MAT-marerial-黄色：和Sphere结合使用，3D建模所使用的材质"><a href="#MAT-marerial-黄色：和Sphere结合使用，3D建模所使用的材质" class="headerlink" title="MAT:marerial 黄色：和Sphere结合使用，3D建模所使用的材质**"></a>MAT:marerial 黄色：和Sphere结合使用，3D建模所使用的材质**</h4><h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><p><a href="http://www.touchdesigner.co/intro">Touch Designer中文社区</a><br><a href="https://derivative.ca/">Touch Designer官网</a><br><a href="https://nvoid.github.io/">Touch Designer 099简介</a></p>
]]></content>
      <tags>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>VVVV入门</title>
    <url>/2020/03/02/VVVV%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>前段时间在做互动装置相关研究 ，主要针对Dante虚拟声卡和多个设备的控制，想找一些编程难度相对低一些，功能相对强大的控制平台，之前听说过Touch Designer和VVVV。尝试了下Touch Designer和VVVV，在此做一下记录。</p>
<a id="more"></a>

<h3 id="VVVV和Touch-Designer的共同点："><a href="#VVVV和Touch-Designer的共同点：" class="headerlink" title="VVVV和Touch Designer的共同点："></a>VVVV和Touch Designer的共同点：</h3><blockquote>
<p>都是节点化编程。都具有各种主流控制协议，能与周边各种软硬件设备互联。能够实现中控功能</p>
</blockquote>
<blockquote>
<p>支持三维模型实时渲染</p>
</blockquote>
<blockquote>
<p>音频功能（VVVV对ASIO支持不是很好）</p>
</blockquote>
<h3 id="VVVV和Touch-Designer的不同点："><a href="#VVVV和Touch-Designer的不同点：" class="headerlink" title="VVVV和Touch Designer的不同点："></a>VVVV和Touch Designer的不同点：</h3><blockquote>
<p>在界面友好程度上Touch Designer帮助文档更加齐全，示例文件也更加全面。</p>
</blockquote>
<blockquote>
<p>VVVV免费许可下功能没有限制，但TouchDesigner免费许可下部分功能受限。</p>
</blockquote>
<blockquote>
<p>扩展性上VVVV使用C#，Touch Designer内置了python解释器，扩展性更强</p>
</blockquote>
<blockquote>
<p>VVVV使用Boygroup可以实现一台服务器控制多台PC进行画面输出，TD只能使用NDI或Spout，暂未找到其他方法</p>
</blockquote>
<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><p><a href="https://vvvv.org/">VVVV官网</a></p>
<p><a href="https://www.bilibili.com/video/av40091797?from=search&seid=10961663922086734336">VVVV教程</a></p>
]]></content>
      <tags>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>accesss数据库转存PostgreSQL数据库</title>
    <url>/2020/03/23/accesss%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BD%AC%E5%AD%98PostgreSQL%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<p>使用python将accesss数据库数据读取为Dataframe格式，并批量转存到PostgreSQL数据库。两个数据 库字段有部分不相同，需对Dataframe数据进行处理。</p>
<a id="more"></a>

<p>代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> psycopg2</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> pypyodbc</span><br><span class="line">pgname = <span class="string">&quot;RZCS&quot;</span> <span class="comment">#postgreSQL数据库名</span></span><br><span class="line">ip = <span class="string">&quot;10.65.43.135&quot;</span>     <span class="comment">#postgreSQL数据库地址</span></span><br><span class="line">park_name=<span class="string">&quot;荆州一期&quot;</span>    <span class="comment">#公园名称</span></span><br><span class="line">item_name=<span class="string">&quot;女娲补天&quot;</span>    <span class="comment">#项目名称</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    conn_output = psycopg2.connect(database=pgname, user=<span class="string">&quot;openpg&quot;</span>, password=<span class="string">&quot;openpgpwd&quot;</span>, host=ip, port=<span class="string">&quot;5432&quot;</span>) <span class="comment">#连接postgreSQL数据库</span></span><br><span class="line">    cur_output = conn_output.cursor()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:   <span class="comment">#抛出异常</span></span><br><span class="line">    print(e)</span><br><span class="line">path = <span class="string">r&#x27;D:\新建文件夹4\test.mdb&#x27;</span>  <span class="comment"># 定义数据库日志文件路径</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    conn_input = pypyodbc.connect(<span class="string">r&quot;Driver=&#123;Microsoft Access Driver (*.mdb, *.accdb)&#125;;DBQ=&quot;</span> + path + <span class="string">&quot;;Uid=;Pwd=;&quot;</span>) <span class="comment">#连接Access数据库</span></span><br><span class="line">    cur_input = conn_input.cursor()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e: <span class="comment">#抛出异常</span></span><br><span class="line">    print(e)</span><br><span class="line">cur_input.execute(<span class="string">&quot;select * from 投影运行表&quot;</span>) <span class="comment">#选择要写入数据</span></span><br><span class="line">data=cur_input.fetchall() <span class="comment">#读取要写入数据</span></span><br><span class="line">da=pd.DataFrame(data,columns = [<span class="string">&#x27;日期&#x27;</span>,<span class="string">&#x27;ip&#x27;</span>,<span class="string">&#x27;当日总灯时&#x27;</span>,<span class="string">&#x27;当日灯时&#x27;</span>,<span class="string">&#x27;风扇报警&#x27;</span>,<span class="string">&#x27;灯泡报警&#x27;</span>,<span class="string">&#x27;滤网报警&#x27;</span>,<span class="string">&#x27;开关机次数&#x27;</span>]) <span class="comment">#读出数据List转为Dataframe</span></span><br><span class="line">da.insert(<span class="number">0</span>,<span class="string">&quot;公园名称&quot;</span>,item_name)   <span class="comment">#数据库格式不匹配，在第一列加入公园名称，值为park_name</span></span><br><span class="line">da.insert(<span class="number">0</span>,<span class="string">&quot;项目名称&quot;</span>,park_name)   <span class="comment">#数据库格式不匹配，在第一列加入项目名称.值为item_name</span></span><br><span class="line">da.insert(<span class="number">10</span>,<span class="string">&quot;非指令开关机次数&quot;</span>,<span class="string">&#x27;0&#x27;</span>) <span class="comment">#数据库格式不匹配，在最后一列加非指令开关，值默认为0</span></span><br><span class="line">placeholders = <span class="string">&#x27;, &#x27;</span>.join([<span class="string">&#x27;%s&#x27;</span>] * da.shape[<span class="number">1</span>]) <span class="comment">#将每一行的所有值，作为字符变量</span></span><br><span class="line">columns_str = <span class="string">&#x27;, &#x27;</span>.join(da.columns.values)  <span class="comment">#将要写入的列名，按语句要求格式化</span></span><br><span class="line">sql = <span class="string">&quot;insert into &#123;&#125;(&#123;&#125;)values (&#123;&#125;)&quot;</span>.<span class="built_in">format</span>(<span class="string">&#x27;投影运行表&#x27;</span>, columns_str, placeholders) <span class="comment">#将所有变量带入字符串中</span></span><br><span class="line"><span class="keyword">try</span>:    <span class="comment">#尝试写入数据库，并提交</span></span><br><span class="line">    cur_output.executemany(sql, da.values)</span><br><span class="line">    conn_output.commit()</span><br><span class="line">    print(<span class="string">&quot;写入成功！！&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:  <span class="comment">#异常抛出</span></span><br><span class="line">    print(e)</span><br><span class="line">conn_output.close() <span class="comment">#连接断开</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>python</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>gitment配置过程中出现的问题</title>
    <url>/2019/02/27/gitment%E9%85%8D%E7%BD%AE%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>在hexo博客配置gitment评论系统时，出现<code>Object ProgressEvent</code>或<code>validation failed</code>的解决方法。  </p>
<a id="more"></a>
<h2 id="Object-ProgressEvent"><a href="#Object-ProgressEvent" class="headerlink" title="Object ProgressEvent"></a>Object ProgressEvent</h2><p>打开blog目录中<code>themes\yilia\layout\_partial\post\gitment.ejs</code>将  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;&#x2F;&#x2F;imsun.github.io&#x2F;gitment&#x2F;style&#x2F;default.css&quot;&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;&#x2F;&#x2F;imsun.github.io&#x2F;gitment&#x2F;dist&#x2F;gitment.browser.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>修改为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;billts.site&#x2F;extra_css&#x2F;gitment.css&quot;&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;billts.site&#x2F;js&#x2F;gitment.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>更新<code>hexo clean&amp;&amp;hexo g</code>,同步<code>hexo d</code>,再重新打开网站登录就不会报错了，而且评论框也已经汉化了。  </p>
<h2 id="validation-failed"><a href="#validation-failed" class="headerlink" title="validation failed"></a>validation failed</h2><p>打开blog目录中<code>themes\yilia\layout\_partial\post\gitment.ejs</code>将</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id: &quot;&lt;%&#x3D;url%&gt;&quot;,</span><br></pre></td></tr></table></figure>
<p>改为  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id: &#39;&lt;%&#x3D; page.title %&gt;&#39;,</span><br></pre></td></tr></table></figure>
<p>更新<code>hexo clean&amp;&amp;hexo g</code>,同步<code>hexo d</code>,再重新打开网站初始化评论就不会报错了。</p>
<h2 id="LF-will-be-replaced-by-CRLF"><a href="#LF-will-be-replaced-by-CRLF" class="headerlink" title="LF will be replaced by CRLF"></a>LF will be replaced by CRLF</h2><p>windows中的换行符为 CRLF，而在Linux下的换行符为LF，git add或者git commit的时候就会弹出警告。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config –global core.autocrlf false</span><br></pre></td></tr></table></figure>
<h2 id="增加流程图支持"><a href="#增加流程图支持" class="headerlink" title="增加流程图支持"></a>增加流程图支持</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-filter-flowchart</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo首次测试</title>
    <url>/2019/02/01/hello-world/</url>
    <content><![CDATA[<p>Hexo 搭建个人博客首次上线测试</p>
<a id="more"></a>
<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>
]]></content>
      <tags>
        <tag>测试</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo配置sitemap</title>
    <url>/2019/02/21/hexo%E9%85%8D%E7%BD%AEsitemap/</url>
    <content><![CDATA[<p>针对hexo博客生成sitemap.xml方便提交搜索引擎。</p>
<a id="more"></a>


<h2 id="hexo安装sitemap"><a href="#hexo安装sitemap" class="headerlink" title="hexo安装sitemap"></a>hexo安装sitemap</h2><p>在博客根目录下按shift键不放再鼠标右击，选择<code>在此处打开Powshell窗口</code>输入<code>start cmd</code>进入<code>CMD</code>窗口，运行如下代码:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure>
<p>在博客<code>theme</code>目录下找到<code>_config.yml</code>文件，添加如下代码:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sitemap: </span><br><span class="line">    path: sitemap.xml</span><br><span class="line">baidusitemap:</span><br><span class="line">    path: baidusitemap.xml</span><br></pre></td></tr></table></figure>
<p>第一个是提交给Google的，另外一个是提交给百度的<br>然后在博客的的<code>_config.yml</code>里<code>url</code>更改为自己的博客地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">url: 博客地址</span><br></pre></td></tr></table></figure>
<p>执行<code>hexo g</code>生成静态页面，然后执行<code>hexo s</code>启动服务</p>
<p>打开 <a href="http://localhost:4000/sitemap.xml">http://localhost:4000/sitemap.xml</a> 即可看到效果,就可以到各大搜索引擎提交sitemap站点地图了</p>
<p>但是由于Github Pages禁止百度爬取，所以只在Google上提交成功，在百度上会提示解析失败</p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>mpv添加网络控制</title>
    <url>/2019/02/20/mpv%E6%B7%BB%E5%8A%A0%E7%BD%91%E7%BB%9C%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<img align="left" src="https://i.postimg.cc/SQvwmzvM/mpv-icon-8bit-128x128.png">

<hr>
<p>mpv 播放器本身只支持IPC控制，在Linux下很方便，但是在Windows下却不方便，而且也没有返回。</p>
<p>在GitHub上找到个<a href="https://github.com/open-dynaMIX/simple-mpv-webui">项目</a>，可以实现mpv播放器网页控制，经过测试可以实现我的需求。  </p>
<hr>
<a id="more"></a>
<h2 id="mpv播放器"><a href="#mpv播放器" class="headerlink" title="mpv播放器"></a>mpv播放器</h2><p>mpv播放器<a href="https://mpv.io/installation/">官网</a>上提供的两个链接测试之后luasocket都不能运行，在自己电脑上编译的版本却没有问题，<a href="https://www.bwll.site/2019/02/18/MSYS2%E7%BC%96%E8%AF%91MPV/">MSYS2编译MPV</a></p>
<h2 id="LuaSocket"><a href="#LuaSocket" class="headerlink" title="LuaSocket"></a>LuaSocket</h2><p><a href="https://github.com/diegonehab/luasocket">LuaSocket</a>为lua语言实现了网络功能，GitHub上提供了源码。</p>
<p>网上找到的编译好的luasocket很多不能用，最后在<a href="https://github.com/pkulchenko/ZeroBraneStudio">ZeroBraneStudio</a>中提取了64位的luasocket 3.0rc1的<a href="https://pan.baidu.com/s/1ZLiSyZXIP_VtGFSEB84gaw">编译好的文件</a>。</p>
<p>将mime和socket两个文件夹以及ltn12.lua、mime.lua、socket.lua三个文件置于mpv播放器文件夹根目录下即可被mpv调用<br><img src="https://i.postimg.cc/MTn00Q4t/1550649082-1.png" alt="avatar"></p>
<h2 id="simple-mpv-webui"><a href="#simple-mpv-webui" class="headerlink" title="simple-mpv-webui"></a>simple-mpv-webui</h2><p><a href="https://github.com/open-dynaMIX/simple-mpv-webui">simple-mpv-webui</a>为mpv创建一个基于web的用户界面，需要luasocket。</p>
<p>克隆或下载全部文件。WIN+R,运行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%APPDATA%</span><br></pre></td></tr></table></figure>
<p>找到或新建MPV文件夹，在MPV文件夹下新建Scripts文件夹，将simple-mpv-webui全部文件置于此文件夹下即可</p>
<p><img src="https://i.postimg.cc/TPMqj1GX/1550650200-1.png" alt="avatar"></p>
<p>打开mpv,浏览器内访问：<a href="http://127.0.0.1:8080/">http://127.0.0.1:8080/</a>就可以看到控制界面了。</p>
<h2 id="增减功能"><a href="#增减功能" class="headerlink" title="增减功能"></a>增减功能</h2><p>打开<em>webui.lua</em>文件,编辑以下代码段可以实现各种想要的功能</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> commands = &#123;</span><br><span class="line">  play = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pcall</span>(mp.set_property_bool, <span class="string">&quot;pause&quot;</span>, <span class="literal">false</span>)</span><br><span class="line">  <span class="keyword">end</span>,</span><br><span class="line"></span><br><span class="line">  pause = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pcall</span>(mp.set_property_bool, <span class="string">&quot;pause&quot;</span>, <span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">end</span>,</span><br><span class="line"></span><br><span class="line">  toggle_pause = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">local</span> curr = mp.get_property_bool(<span class="string">&quot;pause&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pcall</span>(mp.set_property_bool, <span class="string">&quot;pause&quot;</span>, <span class="keyword">not</span> curr)</span><br><span class="line">  <span class="keyword">end</span>,</span><br><span class="line"></span><br><span class="line">  fullscreen = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">local</span> curr = mp.get_property_bool(<span class="string">&quot;fullscreen&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pcall</span>(mp.set_property_bool, <span class="string">&quot;fullscreen&quot;</span>, <span class="keyword">not</span> curr)</span><br><span class="line">  <span class="keyword">end</span>,</span><br><span class="line"></span><br><span class="line">  seek = <span class="function"><span class="keyword">function</span><span class="params">(t)</span></span></span><br><span class="line">    <span class="keyword">local</span> valid, msg = validate_number_param(t)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> valid <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>, <span class="literal">false</span>, msg</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pcall</span>(mp.command, <span class="string">&quot;seek &quot;</span>..t)</span><br><span class="line">  <span class="keyword">end</span>,</span><br><span class="line"></span><br><span class="line">  set_position = <span class="function"><span class="keyword">function</span><span class="params">(t)</span></span></span><br><span class="line">    <span class="keyword">local</span> valid, msg = validate_number_param(t)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> valid <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>, <span class="literal">false</span>, msg</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pcall</span>(mp.command, <span class="string">&quot;seek &quot;</span>..t..<span class="string">&quot; absolute&quot;</span>)</span><br><span class="line">  <span class="keyword">end</span>,</span><br><span class="line"></span><br><span class="line">  playlist_prev = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">local</span> position = <span class="built_in">tonumber</span>(mp.get_property(<span class="string">&quot;time-pos&quot;</span>) <span class="keyword">or</span> <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> position &gt; <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">pcall</span>(mp.command, <span class="string">&quot;seek &quot;</span>..-position)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">pcall</span>(mp.command, <span class="string">&quot;playlist-prev&quot;</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span>,</span><br><span class="line"></span><br><span class="line">  playlist_next = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pcall</span>(mp.command, <span class="string">&quot;playlist-next&quot;</span>)</span><br><span class="line">  <span class="keyword">end</span>,</span><br><span class="line"></span><br><span class="line">  playlist_jump = <span class="function"><span class="keyword">function</span><span class="params">(p)</span></span></span><br><span class="line">    <span class="keyword">local</span> valid, msg = validate_number_param(p)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> valid <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>, <span class="literal">false</span>, msg</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pcall</span>(mp.set_property(<span class="string">&#x27;playlist-pos&#x27;</span>, p))</span><br><span class="line">  <span class="keyword">end</span>,</span><br><span class="line"></span><br><span class="line">  add_volume = <span class="function"><span class="keyword">function</span><span class="params">(v)</span></span></span><br><span class="line">    <span class="keyword">local</span> valid, msg = validate_number_param(v)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> valid <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>, <span class="literal">false</span>, msg</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pcall</span>(mp.command, <span class="string">&#x27;add volume &#x27;</span>..v)</span><br><span class="line">  <span class="keyword">end</span>,</span><br><span class="line"></span><br><span class="line">  set_volume = <span class="function"><span class="keyword">function</span><span class="params">(v)</span></span></span><br><span class="line">    <span class="keyword">local</span> valid, msg = validate_number_param(v)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> valid <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>, <span class="literal">false</span>, msg</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pcall</span>(mp.command, <span class="string">&#x27;set volume &#x27;</span>..v)</span><br><span class="line">  <span class="keyword">end</span>,</span><br></pre></td></tr></table></figure>
<p>打开<em>webui.lua</em>文件,编辑以下两个代码段可以实现不同内容反馈。详细指令可以参考mpv的官方<a href="https://mpv.io/manual/stable/">说明</a></p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">build_status_response</span><span class="params">()</span></span></span><br><span class="line">  <span class="keyword">local</span> values = &#123;</span><br><span class="line">    filename = mp.get_property(<span class="string">&#x27;filename&#x27;</span>) <span class="keyword">or</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    duration = mp.get_property(<span class="string">&quot;duration&quot;</span>) <span class="keyword">or</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    position = mp.get_property(<span class="string">&quot;time-pos&quot;</span>) <span class="keyword">or</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    pause = <span class="built_in">tostring</span>(mp.get_property_native(<span class="string">&quot;pause&quot;</span>)) <span class="keyword">or</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    remaining = mp.get_property(<span class="string">&quot;playtime-remaining&quot;</span>) <span class="keyword">or</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    sub_delay = mp.get_property_osd(<span class="string">&quot;sub-delay&quot;</span>) <span class="keyword">or</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    audio_delay = mp.get_property_osd(<span class="string">&quot;audio-delay&quot;</span>) <span class="keyword">or</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    metadata = mp.get_property(<span class="string">&quot;metadata&quot;</span>) <span class="keyword">or</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    volume = mp.get_property(<span class="string">&quot;volume&quot;</span>) <span class="keyword">or</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    volume_max = mp.get_property(<span class="string">&quot;volume-max&quot;</span>) <span class="keyword">or</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    playlist = mp.get_property(<span class="string">&quot;playlist&quot;</span>) <span class="keyword">or</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    track_list = mp.get_property(<span class="string">&quot;track-list&quot;</span>) <span class="keyword">or</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    fullscreen = <span class="built_in">tostring</span>(mp.get_property_native(<span class="string">&quot;fullscreen&quot;</span>)) <span class="keyword">or</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="string">&#x27;&#123;&quot;audio-delay&quot;:&#x27;</span>..values[<span class="string">&#x27;audio_delay&#x27;</span>]:<span class="built_in">sub</span>(<span class="number">1</span>, <span class="number">-4</span>)..<span class="string">&#x27;,&#x27;</span> ..</span><br><span class="line">        <span class="string">&#x27;&quot;duration&quot;:&#x27;</span>..round(values[<span class="string">&#x27;duration&#x27;</span>])..<span class="string">&#x27;,&#x27;</span> ..</span><br><span class="line">        <span class="string">&#x27;&quot;filename&quot;:&quot;&#x27;</span>..values[<span class="string">&#x27;filename&#x27;</span>]..<span class="string">&#x27;&quot;,&#x27;</span> ..</span><br><span class="line">        <span class="string">&#x27;&quot;fullscreen&quot;:&#x27;</span>..values[<span class="string">&#x27;fullscreen&#x27;</span>]..<span class="string">&#x27;,&#x27;</span> ..</span><br><span class="line">        <span class="string">&#x27;&quot;metadata&quot;:&#x27;</span>..values[<span class="string">&#x27;metadata&#x27;</span>]..<span class="string">&#x27;,&#x27;</span> ..</span><br><span class="line">        <span class="string">&#x27;&quot;pause&quot;:&#x27;</span>..values[<span class="string">&#x27;pause&#x27;</span>]..<span class="string">&#x27;,&#x27;</span> ..</span><br><span class="line">        <span class="string">&#x27;&quot;playlist&quot;:&#x27;</span>..values[<span class="string">&#x27;playlist&#x27;</span>]..<span class="string">&#x27;,&#x27;</span> ..</span><br><span class="line">        <span class="string">&#x27;&quot;position&quot;:&#x27;</span>..round(values[<span class="string">&#x27;position&#x27;</span>])..<span class="string">&#x27;,&#x27;</span> ..</span><br><span class="line">        <span class="string">&#x27;&quot;remaining&quot;:&#x27;</span>..round(values[<span class="string">&#x27;remaining&#x27;</span>])..<span class="string">&#x27;,&#x27;</span> ..</span><br><span class="line">        <span class="string">&#x27;&quot;sub-delay&quot;:&#x27;</span>..values[<span class="string">&#x27;sub_delay&#x27;</span>]:<span class="built_in">sub</span>(<span class="number">1</span>, <span class="number">-4</span>)..<span class="string">&#x27;,&#x27;</span> ..</span><br><span class="line">        <span class="string">&#x27;&quot;track-list&quot;:&#x27;</span>..values[<span class="string">&#x27;track_list&#x27;</span>]..<span class="string">&#x27;,&#x27;</span> ..</span><br><span class="line">        <span class="string">&#x27;&quot;volume&quot;:&#x27;</span>..round(values[<span class="string">&#x27;volume&#x27;</span>])..<span class="string">&#x27;,&#x27;</span> ..</span><br><span class="line">        <span class="string">&#x27;&quot;volume-max&quot;:&#x27;</span>..round(values[<span class="string">&#x27;volume_max&#x27;</span>])..<span class="string">&#x27;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>播放器</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown语法说明</title>
    <url>/2019/02/28/markdown%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<p>Markdown语法说明</p>
<a id="more"></a>

<h2 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 这是一级标题</span></span><br><span class="line"><span class="section">## 这是二级标题</span></span><br><span class="line"><span class="section">### 这是三级标题</span></span><br><span class="line"><span class="section">#### 这是四级标题</span></span><br></pre></td></tr></table></figure>
<p>标准语法一般在#后跟个空格再写文字，部分检查不严格的编辑器不加也可以</p>
<p>效果如下：</p>
<h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h2 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="strong">**加粗文字**</span></span><br><span class="line"><span class="emphasis">*倾斜文字*</span></span><br><span class="line"><span class="emphasis">_倾斜文字_</span></span><br><span class="line"><span class="strong">**<span class="emphasis">*斜体加粗<span class="strong">**<span class="emphasis">*</span></span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong"><span class="emphasis">~~删除线~~</span></span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>下划线<span class="xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span></span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="xml"><span class="tag">&lt;<span class="name">code</span>&gt;</span></span>\高亮<span class="xml"><span class="tag">&lt;/<span class="name">code</span>&gt;</span></span></span></span></span></span></span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><strong>加粗文字</strong><br><em>倾斜文字</em><br><em>倾斜文字</em><br><strong><em>斜体加粗</em></strong><br><del>删除线</del><br><u>下划线</u><br><code>撒打算`</code></p>
<h2 id="三、引用"><a href="#三、引用" class="headerlink" title="三、引用"></a>三、引用</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&gt;这是引用的内容</span><br><span class="line">&gt;&gt;这是引用的内容</span><br><span class="line">&gt;&gt;&gt;这是引用的内容</span><br></pre></td></tr></table></figure>
<p>效果如下:</p>
<blockquote>
<p>这是引用的内容</p>
<blockquote>
<p>这是引用的内容</p>
<blockquote>
<p>这是引用的内容</p>
</blockquote>
</blockquote>
</blockquote>
<h2 id="四、分割线"><a href="#四、分割线" class="headerlink" title="四、分割线"></a>四、分割线</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">----</span><br><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong">****</span>*</span></span></span><br></pre></td></tr></table></figure>
<p>效果如下:</p>
<hr>
<hr>
<hr>
<hr>
<h2 id="五、图片"><a href="#五、图片" class="headerlink" title="五、图片"></a>五、图片</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">align</span>=<span class="string">&quot;left&quot;</span> <span class="attr">width</span> = <span class="string">&quot;200&quot;</span> <span class="attr">height</span> = <span class="string">&quot;50&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://i.postimg.cc/qv9s71xK/setupvpn-1.png&quot;</span>&gt;</span></span></span><br><span class="line">&amp;emsp;&amp;emsp;侧边文字</span><br></pre></td></tr></table></figure>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![](https://i.postimg.cc/qv9s71xK/setupvpn-1.png)</span><br></pre></td></tr></table></figure>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span>![](https://i.postimg.cc/qv9s71xK/setvpn-1.png)<span class="xml"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<p>效果如下:<br>沉浸：</p>
<img align="left" width = "200" height = "50" src="https://i.postimg.cc/qv9s71xK/setupvpn-1.png">
&emsp;&emsp;侧边文字1 

<hr>
<p>默认：</p>
<p><img src="https://i.postimg.cc/qv9s71xK/setvpn-1.png"></p>
<p>居中：</p>
<center>![](https://i.postimg.cc/qv9s71xK/setvpn-1.png)</center>

<h2 id="六、超链接"><a href="#六、超链接" class="headerlink" title="六、超链接"></a>六、超链接</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">链接名</span>](<span class="link">超链接地址</span>)</span><br></pre></td></tr></table></figure>
<p>效果如下:</p>
<p><a href="http://www.baidu.com/">百度</a></p>
<p><a href="http://www.google.com/">谷歌</a></p>
<h2 id="七、代码"><a href="#七、代码" class="headerlink" title="七、代码"></a>七、代码</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">``` python</span></span><br><span class="line"><span class="code">print(&quot;hello world!&quot;)</span></span><br><span class="line"><span class="code">exit()</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure>
<p>效果如下: </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&quot;hello world!&quot;</span>)</span><br><span class="line">exit()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="八、数学公式"><a href="#八、数学公式" class="headerlink" title="八、数学公式"></a>八、数学公式</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">E = \frac&#123;θ&#125;&#123;S&#125;</span><br><span class="line">$$</span><br><span class="line">$$</span><br><span class="line">E = m \times c^&#123;2&#125;</span><br><span class="line">$$</span><br><span class="line">$$</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>效果如下:</p>
<p>$$<br>E = \frac{θ}{S}<br>$$</p>
<p>$$<br>E = m \times c^{2}<br>$$</p>
<h2 id="九、列表"><a href="#九、列表" class="headerlink" title="九、列表"></a>九、列表</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">## 列表1</span></span><br><span class="line"><span class="bullet">*</span>   Red</span><br><span class="line"><span class="bullet">*</span>   Green</span><br><span class="line"><span class="bullet">*</span>   Blue</span><br><span class="line"></span><br><span class="line"><span class="section">## 列表2</span></span><br><span class="line"><span class="bullet">1.</span>  Red</span><br><span class="line"><span class="bullet">2.</span> 	Green</span><br><span class="line"><span class="bullet">3.</span>	Blue</span><br></pre></td></tr></table></figure>
<p>效果如下:</p>
<h3 id="列表1"><a href="#列表1" class="headerlink" title="列表1"></a>列表1</h3><ul>
<li>  Red</li>
<li>  Green</li>
<li>  Blue</li>
</ul>
<h3 id="列表2"><a href="#列表2" class="headerlink" title="列表2"></a>列表2</h3><ol>
<li> Red</li>
<li> Green</li>
<li> Blue</li>
</ol>
<h2 id="十、任务列表"><a href="#十、任务列表" class="headerlink" title="十、任务列表"></a>十、任务列表</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> [ ] 任务1</span><br><span class="line"><span class="bullet">-</span> [ ] 任务2</span><br><span class="line"><span class="bullet">-</span> [ ] 任务3</span><br><span class="line"><span class="bullet">-</span> [ ] 任务4</span><br><span class="line"><span class="bullet">-</span> [x] 任务5完成</span><br></pre></td></tr></table></figure>
<p>效果如下:</p>
<ul>
<li><input disabled="" type="checkbox"> 任务1</li>
<li><input disabled="" type="checkbox"> 任务2</li>
<li><input disabled="" type="checkbox"> 任务3</li>
<li><input disabled="" type="checkbox"> 任务4</li>
<li><input checked="" disabled="" type="checkbox"> 任务5完成</li>
</ul>
<h2 id="十一、表格"><a href="#十一、表格" class="headerlink" title="十一、表格"></a>十一、表格</h2><p>默认:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">| 表头1  | 表头2 |</span><br><span class="line">| ------------- | ------------- |</span><br><span class="line">| 单元格11  | 单元格12  |</span><br><span class="line">| 单元格21  | 单元格22  |</span><br></pre></td></tr></table></figure>
<p>居中:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">| 表头1  | 表头2 |</span><br><span class="line">| :-------------: | :-------------: |</span><br><span class="line">| 单元格11  | 单元格12  |</span><br><span class="line">| 单元格21  | 单元格22  |</span><br></pre></td></tr></table></figure>
<p>效果如下:</p>
<table>
<thead>
<tr>
<th>表头1</th>
<th>表头2</th>
</tr>
</thead>
<tbody><tr>
<td>单元格11</td>
<td>单元格12</td>
</tr>
<tr>
<td>单元格21</td>
<td>单元格22</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">表头1</th>
<th align="center">表头2</th>
</tr>
</thead>
<tbody><tr>
<td align="center">单元格11</td>
<td align="center">单元格12</td>
</tr>
<tr>
<td align="center">单元格21</td>
<td align="center">单元格22</td>
</tr>
</tbody></table>
<h2 id="十二、流程"><a href="#十二、流程" class="headerlink" title="十二、流程"></a>十二、流程</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div align&#x3D;&quot;center&quot;&gt;</span><br><span class="line"></span><br><span class="line">···flow</span><br><span class="line">st&#x3D;&gt;start: 开始</span><br><span class="line">e&#x3D;&gt;end: 结束</span><br><span class="line">op1&#x3D;&gt;operation: 开发流程</span><br><span class="line">op2&#x3D;&gt;operation: 提出需求</span><br><span class="line">op3&#x3D;&gt;operation: 负责人</span><br><span class="line">op4&#x3D;&gt;operation: 包装</span><br><span class="line">op5&#x3D;&gt;parallel: 继续讨论</span><br><span class="line">op6&#x3D;&gt;operation: 讨论</span><br><span class="line">cond&#x3D;&gt;condition: 确认</span><br><span class="line">st-&gt;op1-&gt;op2-&gt;op3-&gt;cond</span><br><span class="line">cond(yes)-&gt;op4-&gt;e</span><br><span class="line">cond(no)-&gt;op6-&gt;e</span><br><span class="line">···</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="center">操作</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">start</td>
<td align="center">开始</td>
</tr>
<tr>
<td align="center">end</td>
<td align="center">结束</td>
</tr>
<tr>
<td align="center">opration</td>
<td align="center">普通操作</td>
</tr>
<tr>
<td align="center">condition</td>
<td align="center">判断块</td>
</tr>
<tr>
<td align="center">subroutine</td>
<td align="center">子任务块</td>
</tr>
<tr>
<td align="center">inputoutput</td>
<td align="center">输入输出</td>
</tr>
</tbody></table>
<p>效果如下：</p>
<div align="center">

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">st&#x3D;&gt;start: 开始</span><br><span class="line">e&#x3D;&gt;end: 结束</span><br><span class="line">op1&#x3D;&gt;operation: 开发流程</span><br><span class="line">op2&#x3D;&gt;operation: 提出需求</span><br><span class="line">op3&#x3D;&gt;operation: 负责人</span><br><span class="line">op4&#x3D;&gt;operation: 包装</span><br><span class="line">op5&#x3D;&gt;parallel: 继续讨论</span><br><span class="line">op6&#x3D;&gt;operation: 讨论</span><br><span class="line">cond&#x3D;&gt;condition: 确认</span><br><span class="line">st-&gt;op1-&gt;op2-&gt;op3-&gt;cond</span><br><span class="line">cond(yes)-&gt;op4-&gt;e</span><br><span class="line">cond(no)-&gt;op6-&gt;e</span><br></pre></td></tr></table></figure>
</div>]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>常见镜头数学模型</title>
    <url>/2020/03/24/%E5%B8%B8%E8%A7%81%E9%95%9C%E5%A4%B4%E6%95%B0%E5%AD%A6%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<p>常见镜头数学模型，主要是常见的针孔相机模型和非线性的（鱼眼）镜头模型</p>
<a id="more"></a>

<h2 id="线性"><a href="#线性" class="headerlink" title="线性"></a>线性</h2><h4 id="针孔相机"><a href="#针孔相机" class="headerlink" title="针孔相机"></a>针孔相机</h4><p>投影上最常用的镜头</p>
<p><img src="20150813170130308.jpg" alt="001"></p>
<p>$$<br>\frac{1}{f}=\frac{1}{u}+\frac{1}{v}<br>$$</p>
<h2 id="非线性"><a href="#非线性" class="headerlink" title="非线性"></a>非线性</h2><p>在投影机上常用的鱼眼镜头基本上为等距投影和等立体角投影</p>
<p><img src="20161019221045914.jpg" alt="006"></p>
<h4 id="等距投影"><a href="#等距投影" class="headerlink" title="等距投影"></a>等距投影</h4><p><img src="20161019221305105.jpg" alt="002"></p>
<p>$$<br>rd=fθ<br>$$</p>
<h4 id="等立体角投影"><a href="#等立体角投影" class="headerlink" title="等立体角投影"></a>等立体角投影</h4><p><img src="20161019221637974.jpg" alt="003"></p>
<p>$$<br>rd=2fsin(\frac{θ}{2})<br>$$</p>
<h4 id="正交投影"><a href="#正交投影" class="headerlink" title="正交投影"></a>正交投影</h4><p><img src="20161019221732536.jpg" alt="004"></p>
<p>$$<br>rd=fsin(θ)<br>$$</p>
<h4 id="透视投影"><a href="#透视投影" class="headerlink" title="透视投影"></a>透视投影</h4><p><img src="20161019221806099.jpg" alt="005"></p>
<p>$$<br>rd=2ftan(\frac{θ}{2})<br>$$</p>
]]></content>
      <tags>
        <tag>投影机</tag>
      </tags>
  </entry>
  <entry>
    <title>matplotlib日期作为轴</title>
    <url>/2019/12/12/matplotlib%E6%97%A5%E6%9C%9F%E4%BD%9C%E4%B8%BAX%E8%BD%B4/</url>
    <content><![CDATA[<p>数据生成图表时，默认以日期+时间来作为轴，或者只以日期作为轴，很少以时间作为轴。</p>
<a id="more"></a>

<h2 id="以时间作为X轴"><a href="#以时间作为X轴" class="headerlink" title="以时间作为X轴"></a>以时间作为X轴</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.dates <span class="keyword">as</span> mdates</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>] </span><br><span class="line"><span class="comment"># 指定默认字体</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span> </span><br><span class="line"><span class="comment"># 解决保存图像是负号&#x27;-&#x27;显示为方块的问题</span></span><br><span class="line">csv_data = pd.read_csv(<span class="string">&quot;./LOG.csv&quot;</span>,encoding=<span class="string">&quot;utf8&quot;</span>,header=<span class="number">0</span>,sep=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"><span class="comment">#读取CSV文件</span></span><br><span class="line">PJ_list=csv_data[<span class="string">&quot;DETIL&quot;</span>].unique()</span><br><span class="line"><span class="comment">#获取DETIL所有键值作为</span></span><br><span class="line">data=csv_data[(csv_data[<span class="string">&quot;DETIL&quot;</span>]==<span class="string">&quot;开机&quot;</span>)]</span><br><span class="line"><span class="comment">#将DETIL为开机的数据提取出来</span></span><br><span class="line">data1=csv_data[(csv_data[<span class="string">&quot;DETIL&quot;</span>]==<span class="string">&quot;关机&quot;</span>)]</span><br><span class="line"><span class="comment">#将DETIL为关机的数据提取出来</span></span><br><span class="line">X1=pd.to_datetime(data1[<span class="string">&quot;DATE_H&quot;</span>])</span><br><span class="line">Y1=data1.DETIL</span><br><span class="line">X=pd.to_datetime(data[<span class="string">&quot;DATE_H&quot;</span>])</span><br><span class="line"><span class="comment">#将DATE_H的值转为datetime类型，此处会直接在时间前补全当前日期</span></span><br><span class="line">dadd= pd.date_range(start=<span class="string">&#x27;2019-12-12&#x27;</span>,periods=<span class="number">24</span>,freq=<span class="string">&#x27;H&#x27;</span>)</span><br><span class="line"><span class="comment">#时间为自动补全的时间，每隔1小时生成24个数据</span></span><br><span class="line">Y=data.DETIL</span><br><span class="line">fig, ax = plt.subplots(dpi=<span class="number">100</span>, figsize=(<span class="number">9</span>,<span class="number">6</span>))</span><br><span class="line">ax.set_xticks(pd.date_range(start=<span class="string">&#x27;2019-12-12&#x27;</span>,periods=<span class="number">24</span>,freq=<span class="string">&#x27;H&#x27;</span>))</span><br><span class="line"><span class="comment">#时间为2019.12.12，每隔1小时生成24个数据，并以此作为X轴的刻度</span></span><br><span class="line">ax.xaxis.set_major_formatter(mdates.DateFormatter(<span class="string">&quot;%H:%M:%S&quot;</span>))</span><br><span class="line"><span class="comment">#显示时间格式为小时：分钟：秒</span></span><br><span class="line">ax.set_xlim(dadd[<span class="number">0</span>],dadd[<span class="number">23</span>])</span><br><span class="line"><span class="comment">#X轴值范围限制在0到24</span></span><br><span class="line">plt.xticks(rotation=<span class="number">90</span>)</span><br><span class="line"><span class="comment">#设置横坐标坐标显示时间的刻度范围</span></span><br><span class="line">ax.scatter(X,Y,alpha = <span class="number">.1</span>)</span><br><span class="line"><span class="comment">#画散点图</span></span><br><span class="line">ax.scatter(X1,Y1,alpha = <span class="number">.1</span>)</span><br><span class="line">plt.grid(<span class="literal">True</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<h3 id="效果如下："><a href="#效果如下：" class="headerlink" title="效果如下："></a>效果如下：</h3><div style="text-align: center;">

<p><img src="https://i.postimg.cc/bvY86MVD/myplot.png"></p>
</div>
<br />
***
## 以日期作为X轴
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.dates <span class="keyword">as</span> mdates</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>] </span><br><span class="line"><span class="comment"># 指定默认字体</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span> </span><br><span class="line"><span class="comment"># 解决保存图像是负号&#x27;-&#x27;显示为方块的问题</span></span><br><span class="line">csv_data = pd.read_csv(<span class="string">&quot;./LOG.csv&quot;</span>,encoding=<span class="string">&quot;utf8&quot;</span>,header=<span class="number">0</span>,sep=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"><span class="comment">#读取CSV文件，以逗号做分隔</span></span><br><span class="line">data_filter=csv_data[(csv_data[<span class="string">&quot;FILTER&quot;</span>]==<span class="string">&quot;错误&quot;</span>)]</span><br><span class="line">X1=pd.to_datetime(data_filter[<span class="string">&quot;DATE_D&quot;</span>].unique())</span><br><span class="line">data=data_filter.groupby([<span class="string">&quot;DATE_D&quot;</span>])</span><br><span class="line">count=data[<span class="string">&quot;FILTER&quot;</span>].count()</span><br><span class="line"><span class="comment">#获取FILTER计数</span></span><br><span class="line">data_lamp=csv_data[(csv_data[<span class="string">&quot;LAMP&quot;</span>]==<span class="string">&quot;错误&quot;</span>)]</span><br><span class="line">data2=data_lamp.groupby([<span class="string">&quot;DATE_D&quot;</span>])</span><br><span class="line">X2=pd.to_datetime(data_lamp[<span class="string">&quot;DATE_D&quot;</span>].unique())</span><br><span class="line">count2=data2[<span class="string">&quot;LAMP&quot;</span>].count()</span><br><span class="line">dadd= pd.date_range(start=<span class="string">&#x27;20190922&#x27;</span>,periods=<span class="number">55</span>,freq=<span class="string">&#x27;1D&#x27;</span>)</span><br><span class="line"><span class="comment">#从20190922开始总计55天，每天生成一个序列</span></span><br><span class="line">fig, ax = plt.subplots(dpi=<span class="number">100</span>, figsize=(<span class="number">9</span>,<span class="number">6</span>))</span><br><span class="line">ax.set_xticks(dadd)</span><br><span class="line"><span class="comment">#X轴设置刻度为20190922开始总计55天的序列</span></span><br><span class="line">ax.xaxis.set_major_formatter(mdates.DateFormatter(<span class="string">&quot;%Y-%m-%d&quot;</span>))</span><br><span class="line"><span class="comment">#X轴设置显示格式年-月-日</span></span><br><span class="line">ax.set_xlim(dadd[<span class="number">0</span>],dadd[<span class="number">54</span>])</span><br><span class="line"><span class="comment">#X轴显示范围</span></span><br><span class="line"></span><br><span class="line">data_COV=csv_data[(csv_data[<span class="string">&quot;COVERPLATE&quot;</span>]==<span class="string">&quot;错误&quot;</span>)]</span><br><span class="line">data3=data_COV.groupby([<span class="string">&quot;DATE_D&quot;</span>])</span><br><span class="line">X3=pd.to_datetime(data_COV[<span class="string">&quot;DATE_D&quot;</span>].unique())</span><br><span class="line">count3=data3[<span class="string">&quot;LAMP&quot;</span>].count()</span><br><span class="line"></span><br><span class="line">data_tmp=csv_data[(csv_data[<span class="string">&quot;TEMP&quot;</span>]==<span class="string">&quot;错误&quot;</span>)]</span><br><span class="line">data4=data_COV.groupby([<span class="string">&quot;DATE_D&quot;</span>])</span><br><span class="line">X4=pd.to_datetime(data_COV[<span class="string">&quot;DATE_D&quot;</span>].unique())</span><br><span class="line">count4=data4[<span class="string">&quot;LAMP&quot;</span>].count()</span><br><span class="line"></span><br><span class="line">data_fan=csv_data[(csv_data[<span class="string">&quot;FAN&quot;</span>]==<span class="string">&quot;错误&quot;</span>)]</span><br><span class="line">data5=data_fan.groupby([<span class="string">&quot;DATE_D&quot;</span>])</span><br><span class="line">X5=pd.to_datetime(data_fan[<span class="string">&quot;DATE_D&quot;</span>].unique())</span><br><span class="line">count5=data5[<span class="string">&quot;FAN&quot;</span>].count()</span><br><span class="line">plt.xticks(rotation=<span class="number">90</span>)</span><br><span class="line"><span class="comment">#X轴数据旋转90度</span></span><br><span class="line">ax.scatter(X1,count,alpha = <span class="number">.5</span>,facecolor=<span class="string">&#x27;g&#x27;</span>,marker=<span class="string">&#x27;o&#x27;</span>,label=<span class="string">&quot;滤网故障&quot;</span>)</span><br><span class="line">ax.plot(X1,count,alpha = <span class="number">.5</span>,color=<span class="string">&quot;g&quot;</span>)</span><br><span class="line">ax.scatter(X2,count2,alpha = <span class="number">.5</span>,facecolor=<span class="string">&#x27;b&#x27;</span>,marker=<span class="string">&#x27;*&#x27;</span>,label=<span class="string">&quot;灯泡故障&quot;</span>)</span><br><span class="line">ax.plot(X2,count2,alpha = <span class="number">.5</span>,color=<span class="string">&quot;b&quot;</span>)</span><br><span class="line">ax.scatter(X3,count3,alpha = <span class="number">.5</span>,facecolor=<span class="string">&#x27;r&#x27;</span>,marker=<span class="string">&#x27;s&#x27;</span>,label=<span class="string">&quot;盖板故障&quot;</span>)</span><br><span class="line">ax.plot(X3,count3,alpha = <span class="number">.5</span>,color=<span class="string">&quot;r&quot;</span>)</span><br><span class="line">ax.scatter(X4,count4,alpha = <span class="number">.5</span>,facecolor=<span class="string">&#x27;c&#x27;</span>,marker=<span class="string">&#x27;p&#x27;</span>,label=<span class="string">&quot;温度报警&quot;</span>)</span><br><span class="line">ax.plot(X4,count4,alpha = <span class="number">.5</span>,color=<span class="string">&quot;c&quot;</span>)</span><br><span class="line">ax.scatter(X5,count5,alpha = <span class="number">.5</span>,facecolor=<span class="string">&#x27;m&#x27;</span>,marker=<span class="string">&#x27;&gt;&#x27;</span>,label=<span class="string">&quot;风扇报警&quot;</span>)</span><br><span class="line">ax.plot(X5,count5,alpha = <span class="number">.5</span>,color=<span class="string">&quot;m&quot;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"><span class="comment">#显示图例</span></span><br><span class="line">plt.grid(<span class="literal">True</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
### 效果如下

<div style="text-align: center;">
![](https://i.postimg.cc/rssNQ8xn/myplot.png)
</div>
<br />

<hr>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>投影机或相机单个像素尺寸计算</title>
    <url>/2020/03/24/%E6%8A%95%E5%BD%B1%E6%9C%BA%E6%88%96%E7%9B%B8%E6%9C%BA%E5%8D%95%E4%B8%AA%E5%83%8F%E7%B4%A0%E5%B0%BA%E5%AF%B8%E8%AE%A1%E7%AE%97/</url>
    <content><![CDATA[<p>投影机或相机计算芯片上单个像素尺寸</p>
<a id="more"></a>

<p>假设投影机、相机或显示器尺寸为S(英寸），分辨率W*H计算单个芯片尺寸（毫米)</p>
<p>$$<br>Sx=\frac{S*25.4}{\sqrt{W^{2}+H^{2}}}<br>$$</p>
<p>$$<br>Sy=\frac{S*25.4}{\sqrt{W^{2}+H^{2}}}<br>$$<br>python代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Sx=IC_size*<span class="number">25.4</span>/(sqrt(square(<span class="built_in">int</span>(width))+square(<span class="built_in">int</span>(height))))</span><br><span class="line">Sy=IC_size*<span class="number">25.4</span>/(sqrt(square(<span class="built_in">int</span>(width))+square(<span class="built_in">int</span>(height))))</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>编程</tag>
        <tag>投影机</tag>
      </tags>
  </entry>
  <entry>
    <title>投影机焦距计算</title>
    <url>/2020/03/24/%E6%8A%95%E5%BD%B1%E6%9C%BA%E7%84%A6%E8%B7%9D%E8%AE%A1%E7%AE%97/</url>
    <content><![CDATA[<p>根据投影机投射比和画面尺寸计算投影机焦距</p>
<a id="more"></a>

<p>若投影机为标准非鱼眼镜头，假设投射比为T<br><img src="0002.png" alt="0002"><br>$$<br>T=\frac{D}{W}=\frac{f}{L}<br>$$<br>焦距f值可推导为:<br>$$<br>f=\frac{D}{W}*L<br>$$</p>
]]></content>
      <tags>
        <tag>编程</tag>
        <tag>投影机</tag>
      </tags>
  </entry>
  <entry>
    <title>根据加速度传感器计算角度</title>
    <url>/2020/01/10/%E6%A0%B9%E6%8D%AE%E5%8A%A0%E9%80%9F%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8%E8%AE%A1%E7%AE%97%E8%A7%92%E5%BA%A6/</url>
    <content><![CDATA[<p>最近尝试用手机APP收集手机加速度传感器数据，并通过UDP/TCP发送出来后，在Blender中编写python服务器，接收加速度数值，并将加速度数值转换为X、Y、Z三个轴的角度，与Blender中的模型绑定。在此记录下通过三轴加速度计算三轴偏转角度的算法</p>
<a id="more"></a>

<p>假设手机静止放置水平面上，X方向、Y方向加速度应都为零，Z方向加速度为g(g=9.8 m/s<sup>2</sup>)。转动一定角度后通过计算可以得出三个轴的角度。</p>
<div style="text-align: center;">
![](https://i.postimg.cc/L5cxVb1Z/1578642627-1.png)
</div>
<br />
假设三个轴方向的加速度分别为Ax、Ay、Az，三个轴方向的弧度分别为:
$$
α1= arctan(\frac{Ax}{\sqrt{Ay^2 + Az^2}})
$$
$$
β1= arctan(\frac{Ay}{\sqrt{Ax^2 + Az^2}})
$$
$$
γ1= arctan(\frac{Az}{\sqrt{Ax^2 + Ay^2}})
$$

<p>三个轴方向的角度:<br>$$<br>θx= arctan(\frac{Ax}{\sqrt{Ay^2 + Az^2}}) \times {180/π}<br>$$<br>$$<br>θy= arctan(\frac{Ay}{\sqrt{Ax^2 + Az^2}}) \times {180/π}<br>$$<br>$$<br>θz= arctan(\frac{Az}{\sqrt{Ax^2 + Ay^2}}) \times {180/π}<br>$$</p>
]]></content>
      <tags>
        <tag>编程</tag>
        <tag>python</tag>
        <tag>Blender</tag>
      </tags>
  </entry>
  <entry>
    <title>视频带宽计算</title>
    <url>/2020/03/06/%E8%A7%86%E9%A2%91%E5%B8%A6%E5%AE%BD%E8%AE%A1%E7%AE%97/</url>
    <content><![CDATA[<p>分辨率1920*1080，帧率24，色彩3X8bit的视频文件，未压缩的情况下数据大小。在实际使用上可以依据此来计算视频接口带宽是否满足视频播放要求。</p>
<a id="more"></a>

<blockquote>
<p>1 Byte（字节） = 8 Bit（位）<br>1 Kb = 1024 Byte<br>一帧大小 = 1920 * 1080 * 24（色彩） = 49766400（bit） = 6220800（Byte）= 6075 (Kb）= 5.93 (MB)<br>每秒数据 =1920 * 1080 * 24（色彩）* 24（帧数）= 1194393600（Bit) =149299200 (Byte)= 145800(Kb) = 142(MB)</p>
</blockquote>
]]></content>
      <tags>
        <tag>video</tag>
      </tags>
  </entry>
  <entry>
    <title>视频播放原理</title>
    <url>/2020/03/06/%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<p>普通视频文件（MP4/AVI/MOV）通过播放器播放最终输出到显示器上，简单说需要三个大步骤：分离、解码、渲染</p>
<a id="more"></a>

<h2 id="分离"><a href="#分离" class="headerlink" title="分离"></a>分离</h2><h4 id="解协议"><a href="#解协议" class="headerlink" title="解协议"></a>解协议</h4><blockquote>
<p>若是网络流媒体协议数据，需要将数据文件解析为相应的封装格式。网络流媒体协议，如HTTP、RTMP等，将媒体数据和其他数据同时传输。视频播放器解协议将数据中的媒体文件解析为标准的视频文件。例如采用RTMP协议传输的数据经过解协议后，输出为FLV格式的媒体数据。</p>
</blockquote>
<h4 id="解封装"><a href="#解封装" class="headerlink" title="解封装"></a>解封装</h4><blockquote>
<p>标准媒体文件（MKV/MP4/MOV）或解协议后的媒体文件等，需将文件分离，将音频、视频等数据拆分成单独的内容。解封装将视频、音频信息分离。</p>
</blockquote>
<h2 id="解码"><a href="#解码" class="headerlink" title="解码"></a>解码</h2><blockquote>
<p>解封装后的音视频文件仍为压缩文件，不能够直接被声卡或显卡识别。<br>解码是指将解封装后生成的压缩视频（H264/H265/VP8/Mpeg4)和音频（FLAC/ACC）文件，解码为非压缩的视频（YUV/RGB）和音频（PCM）流。<br>这一步在整个播放过程中最为复杂，也最耗费系统资源。</p>
</blockquote>
<h4 id="滤镜"><a href="#滤镜" class="headerlink" title="滤镜"></a>滤镜</h4><blockquote>
<p>解码完成后滤镜接过数据，通过滤镜信息对数据进行处理。</p>
</blockquote>
<h2 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h2><h4 id="音视频同步"><a href="#音视频同步" class="headerlink" title="音视频同步"></a>音视频同步</h4><blockquote>
<p>根据封装模块里的参数信息，同步解码出来的视频和音频，并将数据流送至显卡和声卡。</p>
</blockquote>
<h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><blockquote>
<p>声卡和显卡获取同步后的数据流进行声音的播放和视频的显示。</p>
</blockquote>
]]></content>
      <tags>
        <tag>播放器</tag>
        <tag>video</tag>
      </tags>
  </entry>
  <entry>
    <title>银幕亮度理论计算方法</title>
    <url>/2019/02/28/%E9%93%B6%E5%B9%95%E4%BA%AE%E5%BA%A6%E7%90%86%E8%AE%BA%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>一种投影系统银幕亮度计算方法，粗略计算画面亮度。</p>
<a id="more"></a>

<h2 id="单位换算"><a href="#单位换算" class="headerlink" title="单位换算"></a>单位换算</h2><p>$$<br>照度E = \frac{光通量θ}{面积S}<br>$$</p>
<p>$$<br>亮度L=亮度系数β \ast 照度E<br>$$</p>
<p>$$<br>照度:l lux = 1 lm/m^{2} = 0.0929 lm/ft^{2}<br>$$</p>
<p>$$<br>亮度: 1 cd/m^{2} = 0.2919 fl<br>$$</p>
<p>$$<br>亮度: 1 fl= 3.426 cd/m^{2}<br>$$</p>
<h2 id="银幕亮度估算："><a href="#银幕亮度估算：" class="headerlink" title="银幕亮度估算："></a>银幕亮度估算：</h2><p>$$<br>银幕亮度(cd/m^{2}) Bs = \frac{光通量θ}{面积S\times兀}\times 银幕增益β<br>$$<br>$$<br>银幕亮度(FL) Bs = \frac{光通量θ}{面积S\times10.764}\times 银幕增益β<br>$$</p>
<h2 id="例如"><a href="#例如" class="headerlink" title="例如"></a>例如</h2><p>投影机亮度<code>5000lm</code>，画面尺寸<code>12.8m*7.2m</code>，银幕亮度系数2.4</p>
<h3 id="坎德拉-candela"><a href="#坎德拉-candela" class="headerlink" title="坎德拉 (candela):"></a>坎德拉 (<em>candela</em>):</h3><p>$$<br>银幕亮度 Bs=\frac{5000lm}{11.52m \times 7.2m \times 3.14} \times 2.4 = 46.057 cd/m^{2}<br>$$</p>
<h3 id="英寸朗伯-FL"><a href="#英寸朗伯-FL" class="headerlink" title="英寸朗伯  (FL):"></a>英寸朗伯  (<em>FL</em>):</h3><p>$$<br>银幕亮度 Bs=\frac{5000lm}{11.52m \times 7.2m \times 10.764} \times 2.4  = 13.44 fl<br>$$</p>
<h3 id="单位换算-1"><a href="#单位换算-1" class="headerlink" title="单位换算"></a>单位换算</h3><p>$$<br>46.057 cd/m^{2} \times 0.2919=13.44 fl<br>$$</p>
]]></content>
      <tags>
        <tag>Film</tag>
      </tags>
  </entry>
  <entry>
    <title>视频文件各种参数</title>
    <url>/2019/02/25/%E8%A7%86%E9%A2%91%E6%96%87%E4%BB%B6%E5%90%84%E7%A7%8D%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<p>在播放器制作过程中经常见到各种参数，简单做了下查询，在此做一下记录方便日后查询。  </p>
<a id="more"></a>
<blockquote>
<h1 id="常见封装格式"><a href="#常见封装格式" class="headerlink" title="常见封装格式"></a>常见封装格式</h1><p>视频是现在计算机中多媒体系统中的重要一环。为了适应储存视频的需要，人们设定了不同的视频文件格式来把视频和音频放在一个文件中，以方便同时回放，这个文件就是封装。常见有AVI、RMVB、MKV、MOV、MP4等，一个完整的视频文件是由音频和视频2部分组成的。H264、H263，mpeg4等就是视频编码格式，MP3、AAC等就是音频编码格式。  </p>
<blockquote>
<h2 id="MOV"><a href="#MOV" class="headerlink" title=".MOV"></a>.MOV</h2><p>MOV格式是由美国著名的Apple（苹果）公司开发的一种视频格式，其默认的播放器是苹果的QuickTime Player。具有较高的压缩比率和较完美的视频清晰度，并可以保存alpha通道。多媒体编辑及视频处理软件支持比较好。  </p>
<h2 id="MP4"><a href="#MP4" class="headerlink" title=".MP4"></a>.MP4</h2><p>MP4是一套用于音频、视频信息的压缩编码标准，由国际标准化组织（ISO）和国际电工委员会（IEC）下属的“动态图像专家组”（Moving Picture Experts Group，即MPEG）制定，在视频编辑软件和播放设备上的兼容性很好，兼容编码全面。  </p>
<h2 id="AVI"><a href="#AVI" class="headerlink" title=".AVI"></a>.AVI</h2><p>由微软公司开发的一种数字音频与视频文件格式， AVI视频格式的优点是图像质量好，但是其缺点是体积过于庞大。<br>尽管AVI已经属于老旧的技术，但是由于Windows的通用性，和简单易懂的开发API，仍被广泛使用。AVI的文件结构分为“头部”，“主体”和“索引”三部分。主体中图像数据和声音数据是交互存放的。从尾部的索引可以索引跳到自己想放的位置。AVI将视频和音频封装在一个文件里，其顺序是：若干视频帧（Video Frame）之后接着若干音频帧（Audio Frame），再然后是视频帧、音频帧，故名为“音频视频交织”，意即音频和视频按帧交错排列，以此达到音频同步于视频播放的效果。AVI本身只是提供了这么一个框架，内部的图像数据和声音顺据格式可以是任意的编码形式。但是由于索引放在了文件尾部，所以在播放internet流媒体时已属力不从心。  </p>
<h2 id="MKV"><a href="#MKV" class="headerlink" title=".MKV"></a>.MKV</h2><p>Matroska多媒体容器（Multimedia Container）是一种开放标准的自由的容器和文件格式，是一种多媒体封装格式，能够在一个文件中容纳无限数量的视频、音频、图片或字幕轨道。所以其不是一种压缩格式，而是Matroska定义的一种多媒体容器文件。其目标是作为一种统一格式保存常见的电影、电视节目等多媒体内容。在概念上Matroska和其他容器，比如AVI、MP4或ASF（Advanced Sreaming Format，即高级流格式）比较类似，但其在技术规程上完全开放，在实现上包含很多开源软件。可将多种不同编码的视频及16条以上不同格式的音频和不同语言的字幕流封装到一个Matroska 媒体文件当中。最大的特点就是能容纳多种不同类型编码的视频、音频及字幕流。  </p>
<h2 id="RMVB"><a href="#RMVB" class="headerlink" title=".RMVB"></a>.RMVB</h2><p>RMVB的前身为RM格式，它们是Real Networks公司制定的音频视频压缩规范，根据不同的网络传输速率，而制定出不同的压缩比率，从而实现在低速率的网络上进行影像数据实时传送和播放，具有体积小，画质不错的优点。它的先进之处在于RMVB视频格式打破了原先RM格式那种平均压缩采样的方式，在保证平均压缩比的基础上合理利用比特率资源。  </p>
<h2 id="FLV"><a href="#FLV" class="headerlink" title=".FLV"></a>.FLV</h2><p>FLV流媒体格式是一种全新的视频格式，全称为Flash Video。由于它形成的文件极小、加载速度极快，普遍使用于网络视频网站。  </p>
<h2 id="WebM"><a href="#WebM" class="headerlink" title=".WebM"></a>.WebM</h2><p>WebM由Google提出，是一个开放、免费的媒体文件格式。WebM 影片格式其实是以 Matroska（即 MKV）容器格式为基础开发的新容器格式，WebM标准的网络视频更加偏向于开源并且是基于HTML5标准的，WebM 项目旨在为对每个人都开放的网络开发高质量、开放的视频格式，其重点是解决视频服务这一核心的网络用户体验。  </p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><code>.WMV</code> (Windows Media Video) 是微软公司开发的一种数字视频压缩格式。使用较少。<br><code>.RM</code> RMVB早期版本，固定码率，很少见到了。<br><code>.3GP</code> 是由用于3G UMTS多媒体服务的第三代合作伙伴计划（3GPP）定义的多媒体 容器格式。它用于3G 手机，但也可以在一些2G和4G手机上播放。很少见到了。<br><code>.F4V</code>  与<code>FLV</code>对应属于Flash Video的一种。很少见到了。<br><code>.TS</code> 是用于传输和存储音频，视频以及节目和系统信息协议（PSIP）数据的标准数字容器格式。它用于广播系统或视频网站。</p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><blockquote>
<p><a href="https://wiki.multimedia.cx/index.php/Microsoft_Audio/Video_Interleaved">Microsoft Audio / Video Interleaved（AVI)</a><br><a href="https://docs.microsoft.com/en-us/previous-versions//ms779636(v=vs.85)">AVI RIFF文件参考</a><br><a href="https://wiki.multimedia.cx/index.php/Matroska">Matroska</a><br><a href="https://matroska.org/technical/guides/index.html">Matroska Media Container</a><br><a href="https://www.adobe.com/devnet/f4v.html">F4V/FLV 技术中心</a><br><a href="https://wiki.multimedia.cx/index.php/RealMedia">RealMedia格式</a><br><a href="https://www.webmproject.org/vp9/">WebM</a><br><a href="https://wiki.multimedia.cx/index.php/QuickTime_container">QuickTime container</a><br><a href="https://en.wikipedia.org/wiki/Comparison_of_video_container_formats">视频容器格式的比较</a></p>
</blockquote>
</blockquote>
<h1 id="常见编码格式"><a href="#常见编码格式" class="headerlink" title="常见编码格式"></a>常见编码格式</h1><blockquote>
<h2 id="ITU-T"><a href="#ITU-T" class="headerlink" title="ITU-T"></a>ITU-T</h2><blockquote>
<h3 id="H-263"><a href="#H-263" class="headerlink" title="H.263"></a>H.263</h3><p>H.263是一种视频压缩标准，最初设计为视频会议的低比特率压缩格式。它是由ITU-T 视频编码专家组（VCEG）在1995/1996结束的项目中开发的，作为ITU-T领域 H.26x系列视频编码标准的一员，后来又扩展了在1998年和2000年增加了各种额外的增强功能。1997年和2001年也增加了更多的功能，并于2005年制作了统一版本。  </p>
<h3 id="H-264"><a href="#H-264" class="headerlink" title="H.264"></a>H.264</h3><p>H.264视频格式具有非常广泛的应用范围，涵盖从低比特率互联网流媒体应用到HDTV广播和几乎无损编码的数字电影应用的所有形式的数字压缩视频。  </p>
<h3 id="H-265"><a href="#H-265" class="headerlink" title="H.265"></a>H.265</h3><p>高效视频编码（HEVC），也称为H.265和MPEG-H第2部分，是视频压缩标准，被设计为广泛使用的H.264或MPEG-4的后继者。  </p>
<h3 id="相关链接-1"><a href="#相关链接-1" class="headerlink" title="相关链接"></a>相关链接</h3><p><a href="https://en.wikipedia.org/wiki/Video_Coding_Experts_Group">ITU-T</a><br><a href="https://en.wikipedia.org/wiki/H.263">H263</a><br><a href="https://en.wikipedia.org/wiki/H.264/MPEG-4_AVC">H264</a><br><a href="https://en.wikipedia.org/wiki/High_Efficiency_Video_Coding">H265</a><br><a href="http://x265.org/hevc-h265/">HEVC/H.265</a><br><a href="https://wiki.multimedia.cx/index.php/H.264">MultimediaWiki H264</a></p>
</blockquote>
<h2 id="MPEG"><a href="#MPEG" class="headerlink" title="MPEG"></a>MPEG</h2><blockquote>
<h3 id="MPEG-4"><a href="#MPEG-4" class="headerlink" title="MPEG-4"></a>MPEG-4</h3><p>MPEG-4是一种定义音频和视频（AV）数字数据压缩的方法。它在1998年年底推出，并指定的标准为一组的音频和视频编码格式。  </p>
<h3 id="相关链接-2"><a href="#相关链接-2" class="headerlink" title="相关链接"></a>相关链接</h3><p><a href="https://en.wikipedia.org/wiki/MPEG-4">MPEG-4</a><br><a href="https://en.wikipedia.org/wiki/Moving_Picture_Experts_Group">MPEG</a><br><a href="https://mpeg.chiariglione.org/">Moving Picture Experts Group (MPEG)</a></p>
</blockquote>
<h2 id="Google"><a href="#Google" class="headerlink" title="Google"></a>Google</h2><blockquote>
<h3 id="VP8"><a href="#VP8" class="headerlink" title="VP8"></a>VP8</h3><p>VP8是一种开放且免版税的 视频压缩格式，由Google拥有，由On2创建，作为VP7的后续产品。VP8可以与Vorbis和Opus音频一起多路复用到基于Matroska的容器格式WebM中。VP8仅支持逐行扫描视频信号，具有4：2：0 色度子采样和每个采样8位。  </p>
<h3 id="VP9"><a href="#VP9" class="headerlink" title="VP9"></a>VP9</h3><p>VP9是VP8的后续产品，主要与MPEG的高效视频编码（HEVC / H.265）竞争。起初，VP9主要用于谷歌的视频平台YouTube。与HEVC相比，VP9支持在Web浏览器中很常见。  </p>
<h3 id="相关链接-3"><a href="#相关链接-3" class="headerlink" title="相关链接"></a>相关链接</h3><p><a href="https://en.wikipedia.org/wiki/VP8">VP8</a><br><a href="https://en.wikipedia.org/wiki/VP9">VP9</a><br><a href="https://en.wikipedia.org/wiki/On2_Technologies">On2</a>  </p>
</blockquote>
<h2 id="HAP"><a href="#HAP" class="headerlink" title="HAP"></a>HAP</h2><blockquote>
<h3 id="HAP-1"><a href="#HAP-1" class="headerlink" title="HAP"></a>HAP</h3><p>HAP编码具有最低的数据速率和合理的图像质量。</p>
<h3 id="HAP-Alpha"><a href="#HAP-Alpha" class="headerlink" title="HAP Alpha"></a>HAP Alpha</h3><p>HAP Alpha具有与HAP相同的图像质量，但是支持Alpha通道。</p>
<h3 id="HAP-Q"><a href="#HAP-Q" class="headerlink" title="HAP Q"></a>HAP Q</h3><p>HAP Q以更大的文件大小为代价提高了图像质量。</p>
<h3 id="HAP-Q-Alpha"><a href="#HAP-Q-Alpha" class="headerlink" title="HAP Q Alpha"></a>HAP Q Alpha</h3><p>HAP Q Alpha以更大的文件大小为代价提高了图像质量和Alpha通道。  </p>
<h3 id="相关链接-4"><a href="#相关链接-4" class="headerlink" title="相关链接"></a>相关链接</h3><p><a href="https://hap.video/using-hap.html">HAP</a></p>
</blockquote>
<h2 id="Apple-ProRes"><a href="#Apple-ProRes" class="headerlink" title="Apple ProRes"></a>Apple ProRes</h2><blockquote>
<h3 id="Apple-ProRes-1"><a href="#Apple-ProRes-1" class="headerlink" title="Apple ProRes"></a>Apple ProRes</h3><p>Apple ProRes编解码器充分利用多核处理功能，并具有快速，低分辨率的解码模式。所有Apple ProRes编解码器均支持全分辨率的所有帧大小（包括SD，HD，2K，4K和5K）。数据速率根据编解码器类型，图像内容，帧大小和帧速率而变化。   </p>
<h3 id="相关链接-5"><a href="#相关链接-5" class="headerlink" title="相关链接"></a>相关链接</h3><p><a href="https://support.apple.com/en-us/HT202410">Apple ProRes</a><br><a href="https://www.appgeeker.com/how-to/what-is-apple-prores.html">什么是Apple ProRes</a><br><a href="https://wiki.multimedia.cx/index.php/Apple_ProRes">MultimediaWiki Apple ProRes</a></p>
</blockquote>
<h2 id="引用链接"><a href="#引用链接" class="headerlink" title="引用链接"></a>引用链接</h2><p><a href="https://hap.video/benchmarks.html">H.264，ProRes和HAP对比</a><br><a href="https://blog.csdn.net/leixiaohua1020/article/details/11842919">封装格式对比</a><br><a href="https://en.wikipedia.org/wiki/Comparison_of_audio_coding_formats">音频编码格式对比</a><br><a href="https://www.bgteach.com/article/134">视频文件格式知多少</a><br><a href="https://www.4k123.com/thread-8194-1-1.html">视频格式基础知识</a></p>
</blockquote>
<h1 id="比特率"><a href="#比特率" class="headerlink" title="比特率"></a>比特率</h1><blockquote>
<h2 id="比特率-1"><a href="#比特率-1" class="headerlink" title="比特率"></a>比特率</h2><p>比特率是指每秒传送的比特(bit)数。单位为 bps(Bit Per Second)，比特率越高，每秒传送数据就越多。多媒体行业在指音频或者视频在单位时间内的数据传输率时通常使用<code>码流</code>或<code>码率</code>，单位是kbps（千位每秒）。在同等分辨率下（不考虑各种压缩算法的优劣），码率越高视频清晰度越高，文件体积越大。</p>
<blockquote>
<h3 id="恒定比特率（CBR）"><a href="#恒定比特率（CBR）" class="headerlink" title="恒定比特率（CBR）"></a>恒定比特率（CBR）</h3><p>恒定码率就是说每一秒种的画面如果看做是一个静止的图片文件的话（实际上是每一帧的画面大小加起来）它大小是固定的。</p>
<h3 id="可变比特率（VBR）"><a href="#可变比特率（VBR）" class="headerlink" title="可变比特率（VBR）"></a>可变比特率（VBR）</h3><p>可变码率主就是每一秒画面的大小是不固定。整个视频比特率是不固定的，有最大码率，平均码率和最小码率。</p>
</blockquote>
<h2 id="相关链接-6"><a href="#相关链接-6" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://zh.wikipedia.org/wiki/%E6%AF%94%E7%89%B9%E7%8E%87">比特率</a>  </p>
</blockquote>
<h1 id="帧速率"><a href="#帧速率" class="headerlink" title="帧速率"></a>帧速率</h1><blockquote>
<h2 id="帧速率-1"><a href="#帧速率-1" class="headerlink" title="帧速率"></a>帧速率</h2><p>帧速率（以每秒帧数或fps表示）是称为帧的连续图像出现在显示器上的频率（速率）。该术语同样适用于胶片和摄像机，计算机图形和动作捕捉系统。帧速率也可以称为帧频率，并以赫兹(Hz)表示。简单地说就是在1秒钟时间里播放照片的数量。每秒24帧（FPS）是电影院的标准。增加帧速率可以减轻常见的模糊，闪烁和卡顿等视觉效果。</p>
<h2 id="相关链接-7"><a href="#相关链接-7" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://www.pocket-lint.com/tv/news/143206-what-is-hfr-high-frame-rate-and-why-should-you-care">什么是HFR（高帧率）</a><br><a href="https://en.wikipedia.org/wiki/Persistence_of_vision">视觉持续</a></p>
</blockquote>
<h1 id="分辨率"><a href="#分辨率" class="headerlink" title="分辨率"></a>分辨率</h1><p>图像尺寸，视频文件单帧像素数量。</p>
<h1 id="色彩模型"><a href="#色彩模型" class="headerlink" title="色彩模型"></a>色彩模型</h1><blockquote>
<p>色彩模型（Color model）是一种抽象数学模型，通过一组数字来描述颜色（例如RGB、CMYK等）。色彩空间和色彩模型是容易混淆的概念，色彩模型是把色彩按规则排列的模型，而色彩空间是其在一定条件下排列的结果，在一个色彩模型下可以有不同的色彩空间，它们根据排列的条件的不同会有不同的色域</p>
<h2 id="YUV"><a href="#YUV" class="headerlink" title="YUV"></a>YUV</h2><p>YUV，是一种颜色编码方法。常使用在各个影像处理中。 YUV在对照片或影片编码时，考虑到人类的感知能力，降低色度的带宽。“Y”表示明亮度（Luminance、Luma），“U”和“V”则是色度、浓度（Chrominance、Chroma）。为节省带宽起见，大多数YUV格式平均使用的每像素位数都少于24位。最常见YUV格式为YUV420P。  </p>
<h2 id="RGB"><a href="#RGB" class="headerlink" title="RGB"></a>RGB</h2><p>又称RGB颜色模型或红绿蓝颜色模型，是一种加色模型，将红（Red）、绿（Green）、蓝（Blue）三原色的色光以不同的比例相加，以产生多种多样的色光。  </p>
<h2 id="CMYK"><a href="#CMYK" class="headerlink" title="CMYK"></a>CMYK</h2><p>CMYK是彩色印刷时采用的一种套色模式，利用色料的三原色混色原理，加上黑色油墨，共计四种颜色混合叠加，形成所谓“全彩印刷”。</p>
<h2 id="HSI和HSV"><a href="#HSI和HSV" class="headerlink" title="HSI和HSV"></a>HSI和HSV</h2><p>HSL和HSV都是一种将RGB色彩模型中的点在圆柱坐标系中的表示法。这两种表示法试图做到比基于笛卡尔坐标系的几何结构RGB更加直观。<br><code>HSL</code>即色相、饱和度、亮度<br><code>HSV</code>即色相、饱和度、明度</p>
<h2 id="相关链接-8"><a href="#相关链接-8" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://zh.wikipedia.org/wiki/YUV">YUV</a><br><a href="https://zh.wikipedia.org/wiki/%E8%89%B2%E5%BA%A6%E6%8A%BD%E6%A0%B7">色度采样</a><br><a href="https://www.zhihu.com/question/38303244">色彩空间与色彩模型的本质区别是什么？</a><br><a href="https://zh.wikipedia.org/wiki/%E8%89%B2%E5%BD%A9%E7%A9%BA%E9%96%93">色彩空間</a><br><a href="https://www.konicaminolta.com.cn/instruments/knowledge/color/pdf/color_communication.pdf">精确的色彩交流</a><br><a href="https://www.konicaminolta.com.cn/instruments/knowledge/light/pdf/language_of_light.pdf">光的语言</a><br><a href="https://zh.wikipedia.org/wiki/%E5%8D%B0%E5%88%B7%E5%9B%9B%E5%88%86%E8%89%B2%E6%A8%A1%E5%BC%8F">印刷四分色模式</a><br><a href="https://zh.wikipedia.org/wiki/HSL%E5%92%8CHSV%E8%89%B2%E5%BD%A9%E7%A9%BA%E9%97%B4">HSL和HSV色彩空间</a><br><a href="http://w3.kcua.ac.jp/~fujiwara/infosci/colormodel.html">色彩模型</a>  </p>
</blockquote>
<h1 id="色彩空间"><a href="#色彩空间" class="headerlink" title="色彩空间"></a>色彩空间</h1><blockquote>
<h2 id="YCbCr"><a href="#YCbCr" class="headerlink" title="YCbCr"></a>YCbCr</h2><p>YCbCr或Y’CbCr有的时候会被写作：YCBCR或是Y’CBCR，是色彩空间的一种，通常会用于影片中的影像连续处理，或是数字摄影系统中。Y’和Y是不同的，Y就是所谓的流明（luminance），表示光的浓度且为非线性，使用伽马修正（gamma correction）编码处理。Y’为颜色的亮度（luma）成分、而CB和CR则为蓝色和红色的浓度偏移量成分。</p>
<h2 id="CIE-XYZ"><a href="#CIE-XYZ" class="headerlink" title="CIE XYZ"></a>CIE XYZ</h2><h2 id="CIE-RGB"><a href="#CIE-RGB" class="headerlink" title="CIE RGB"></a>CIE RGB</h2><h2 id="Lab"><a href="#Lab" class="headerlink" title="Lab"></a>Lab</h2><p>Lab是一种不常用的色彩空间。它是在1931年国际照明委员会（CIE）制定的颜色度量国际标准的基础上建立起来的。1976年，经修改后被正式命名为CIELab。它是一种设备无关的颜色系统，也是一种基于生理特征的颜色系统。这也就意味着，它是用数字化的方法来描述人的视觉感应。Lab颜色空间中的L分量用于表示像素的亮度，取值范围是[0,100],表示从纯黑到纯白；a表示从红色到绿色的范围，取值范围是[127,-128]；b表示从黄色到蓝色的范围，取值范围是[127,-128]。  </p>
<h2 id="Adobe-RGB"><a href="#Adobe-RGB" class="headerlink" title="Adobe RGB"></a>Adobe RGB</h2><p>Adobe RGB色彩空间是一种由Adobe Systems于1998年开发的色彩空间。开发的目的是为了尽可能在CMYK彩色印刷中利用计算机显示器等设备的RGB颜色模式上囊括更多的颜色。  </p>
<h2 id="SRGB"><a href="#SRGB" class="headerlink" title="SRGB"></a>SRGB</h2><p>SRGB色彩空间（标准红绿蓝色彩空间）是惠普与微软于1996年一起开发的用于显示器、打印机以及因特网的一种标准RGB色彩空间。</p>
<h2 id="BT-709-BT-2020"><a href="#BT-709-BT-2020" class="headerlink" title="BT.709/BT.2020"></a>BT.709/BT.2020</h2><p>这两个标准都是ITU国际电信联盟专门为现在的HDTV以及未来UHD电视（4K、8K）制定的标准，在色域上的变化主要在于色深方面，BT.2020采用了比传统BT.709更宽广的色域空间。这一提升对于整个影像在色彩层次与过渡方面的增强起到了关键的作用。而色域范围的面积也远远大于BT.709标准，能够显示更加丰富的色彩。</p>
<h2 id="相关链接-9"><a href="#相关链接-9" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://zh.wikipedia.org/wiki/YCbCr">YCbCr</a><br><a href="http://w3.kcua.ac.jp/~fujiwara/infosci/colorspace/colorspace4.html">YCbCr / YPbPr色彩空间</a><br><a href="http://w3.kcua.ac.jp/~fujiwara/infosci/colorspace/colorspace1.html">XYZ色彩空间</a><br><a href="http://w3.kcua.ac.jp/~fujiwara/infosci/colorspace/colorspace3.html">XYZ-Lab转换</a><br><a href="https://zh.wikipedia.org/wiki/Adobe_RGB%E8%89%B2%E5%BD%A9%E7%A9%BA%E9%97%B4">Adobe RGB色彩空间</a><br><a href="http://w3.kcua.ac.jp/~fujiwara/infosci/primaries.html">三原色</a><br><a href="https://www.face2ai.com/DIP-8-0-%E5%BD%A9%E8%89%B2%E6%A8%A1%E5%9E%8B-CIEXYZ-CIERGB/">彩色模型，CIE XYZ，CIE RGB</a><br><a href="http://www.optique-ingenieur.org/en/courses/OPI_ang_M07_C02/co/Contenu_07.html">颜色系统RGB和CIE XYZ</a>  </p>
</blockquote>
<h1 id="色域"><a href="#色域" class="headerlink" title="色域"></a>色域</h1><blockquote>
<h2 id="色域-1"><a href="#色域-1" class="headerlink" title="色域"></a>色域</h2><p>在计算机图形处理中，色域是颜色的某个完全的子集。颜色子集最常见的应用是用来精确地代表一种给定的情况。例如一个给定的色彩空间或是某个输出装置的呈色范围。简单来说就是对象能表示色彩范围。不同的色彩空间在CIE XYZ颜色空间上映射范围。</p>
<h2 id="相关链接-10"><a href="#相关链接-10" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://zhuanlan.zhihu.com/p/36968533">色彩空间与色域</a><br><a href="https://www.jianshu.com/p/9aeba1e1ec48">色域/颜色空间</a><br><a href="https://zh.wikipedia.org/wiki/%E8%89%B2%E5%9F%9F">色域</a>  </p>
</blockquote>
<h1 id="颜色深度"><a href="#颜色深度" class="headerlink" title="颜色深度"></a>颜色深度</h1><blockquote>
<h2 id="颜色深度-1"><a href="#颜色深度-1" class="headerlink" title="颜色深度"></a>颜色深度</h2><p>颜色深度也称为<code>位深度</code>，数字图像中的每个颜色像素都是通过三种基色的组合创建的：红色，绿色和蓝色。每种原色通常被称为“颜色通道”，并且可以具有由其位深度指定的任何范围的强度值。简单来说就是指可以描述的颜色数量，每一个像素点用多少位存储颜色，位深越大，颜色越丰富，颜色之间的过渡更自然和平滑<br>“每像素位数”（bpp）指的是所有三个颜色通道中的位的总和，并表示每个像素处可用的总颜色。彩色图像经常出现混淆，因为可能不清楚发布的数字是指每个像素的比特数还是RGB每个信道的比特数。使用“bpp”作为后缀有助于区分这两个术语。</p>
<h2 id="相关链接-11"><a href="#相关链接-11" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://en.wikipedia.org/wiki/Color_depth">颜色深度</a><br><a href="https://www.leadtools.com/help/leadtools/v20/dh/to/introduction-bits-per-pixel-and-related-ideas.html">Bits Per Pixel</a><br><a href="https://www.diyphotography.net/8-bit-vs-16-bit-color-depth-use-matters/">8位与16位</a><br><a href="https://blog.csdn.net/cc65431362/article/details/80694870">位深度、色深的区别</a></p>
</blockquote>
<h1 id="Gamma"><a href="#Gamma" class="headerlink" title="Gamma"></a>Gamma</h1><blockquote>
<h3 id="Gamma-1"><a href="#Gamma-1" class="headerlink" title="Gamma"></a>Gamma</h3><p>人眼接受光和照相机并不相同,我们把图像从最黑到最白，按100~0来对应，在这个范围内，人眼的视觉感应和真实的值也并不是成线性关系的，当值处于18时，在人眼里已经觉得这是中间值50了。这是因为比起明亮的部分，人眼对暗部的感知更加敏感。简单来说Gamma值就是用来校正这个关系</p>
<h3 id="相关链接-12"><a href="#相关链接-12" class="headerlink" title="相关链接"></a>相关链接</h3><p><a href="https://en.wikipedia.org/wiki/Gamma_correction">伽马校正</a><br><a href="https://www.zhihu.com/question/27467127">色彩校正中的 gamma 值是什么？</a><br><a href="https://learnopengl.com/Advanced-Lighting/Gamma-Correction">Gamma-Correction</a><br><a href="https://www.cnblogs.com/TracePlus/p/4168447.html">Gamma校正与线性空间</a><br><a href="http://w3.kcua.ac.jp/~fujiwara/infosci/gamma.html">伽玛校正</a>  </p>
</blockquote>
</blockquote>
]]></content>
      <tags>
        <tag>video</tag>
      </tags>
  </entry>
</search>
